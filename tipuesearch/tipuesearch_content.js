var tipuesearch = {"pages":[{"title":" ALPS ","text":"ALPS The Arbitrary Linear Plasma Solver ALPS is a parallelised numerical code that solves the Vlasov-Maxwell dispersion\nrelation in hot (even relativistic) magnetised plasma. ALPS allows for any\nnumber of particle species with arbitrary gyrotropic equilibrium distribution\nfunctions supporting waves with any direction of propagation with respect to\nthe background magnetic field. If you use the code for a science publication, please provide the code website github.com/danielver02/ALPS in the acknowledgements of your publication and cite the code paper: Verscharen, D., Klein, K. G., Chandran, B. D. G., Stevens, M. L., Salem, C. S.,\nand Bale, S. D.: ALPS: the Arbitrary Linear Plasma Solver, J. Plasma Phys. 84,\n905840403, 2018, doi: 10.1017/S0022377818000739 Publications using the ALPS code can be found in our NASA ADS Library . For first-time users, we recommend working through our ALPS Tutorial . The key input parameters for ALPS are described on the ALPS Input page. The output format of ALPS is described on the ALPS Output page. Developer Info Kristopher Klein, Daniel Verscharen","tags":"home","loc":"index.html"},{"title":"scanner – ALPS ","text":"type, public :: scanner Description of wavevector scan behavior.\nRead in from scan_read . Contents Variables range_i range_f log_scan heat_s eigen_s type_s n_out n_res diff diff2 Components Type Visibility Attributes Name Initial double precision, public :: range_i Initial scan value. double precision, public :: range_f Final scan value. logical, public :: log_scan Use log (T) or linear (F) spacing. logical, public :: heat_s Calculates heating rates if true. logical, public :: eigen_s Calculates eigenfunctions if true. integer, public :: type_s Type of parameter scan; 0: Current value of to =range and =range . 1: at fixed from current value of to range . 2: Wavevector scan at fixed angle to =range . 3: scan with constant . 4: scan with constant . integer, public :: n_out Number of output scan values. integer, public :: n_res Resolution between output scan values. double precision, public :: diff step size for first wavevector variation. double precision, public :: diff2 step size for second wavevector variation.","tags":"","loc":"type/scanner.html"},{"title":"normalize – ALPS","text":"subroutine normalize(pperp, ppar, grid_fine, nperp, npar) This subroutine normalises the fine interpolation grid. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: pperp (0:nperp,0:npar) Coordinates of perpendicular momentum on fine grid. double precision, intent(in) :: ppar (0:nperp,0:npar) Coordinates of parallel momentum on fine grid. double precision, intent(inout) :: grid_fine (0:nperp,0:npar) Fine output grid from interpolation. integer, intent(in) :: nperp Number of perpendicular steps on fine output grid. integer, intent(in) :: npar Number of parallel steps on fine output grid. Called by proc~~normalize~~CalledByGraph proc~normalize interpolation.f90::normalize program~interpolate interpolate program~interpolate->proc~normalize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/normalize.html"},{"title":"polyharmonic_spline – ALPS","text":"subroutine polyharmonic_spline(grid_coarse, pperp_coarse, ppar_coarse, n_coarse, pperp, ppar, nperp, npar, smoothing, grid_fine) This soubroutine interpolates the grid with a polyharmonic thin-plate spline.\nThis subroutine needs the LUPACK and BLAS libraries to evoke the dgesv subroutine.\nThe method uses the Thin Plate Spline.\nWe use these resources: http://cseweb.ucsd.edu/~sjb/eccv_tps.pdf http://www.univie.ac.at/nuhag-php/bibtex/open_files/po94_M%20J%20D%20Powell%2003%2093.pdf http://vision.ucsd.edu/sites/default/files/fulltext(4).pdf Arguments Type Intent Optional Attributes Name double precision, intent(in) :: grid_coarse (n_coarse) Coarse input grid for interpolation. double precision, intent(in) :: pperp_coarse (n_coarse) Coordinates of perpendicular momentum on coarse grid. double precision, intent(in) :: ppar_coarse (n_coarse) Coordinates of parallel momentum on coarse grid. integer, intent(in) :: n_coarse Number of entries in coarse grid. double precision, intent(in) :: pperp (0:nperp,0:npar) Coordinates of perpendicular momentum on fine grid. double precision, intent(in) :: ppar (0:nperp,0:npar) Coordinates of parallel momentum on fine grid. integer, intent(in) :: nperp Number of perpendicular steps on fine output grid. integer, intent(in) :: npar Number of parallel steps on fine output grid. double precision, intent(in) :: smoothing Smoothing parameter for spline interpolation. double precision, intent(out) :: grid_fine (0:nperp,0:npar) Fine output grid after interpolation. Calls proc~~polyharmonic_spline~2~~CallsGraph proc~polyharmonic_spline~2 interpolation.f90::polyharmonic_spline dgesv dgesv proc~polyharmonic_spline~2->dgesv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~polyharmonic_spline~2~~CalledByGraph proc~polyharmonic_spline~2 interpolation.f90::polyharmonic_spline program~interpolate interpolate program~interpolate->proc~polyharmonic_spline~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/polyharmonic_spline~2.html"},{"title":"BESSK – ALPS","text":"function BESSK(N, X) This function calculates the modified Bessel function of the third kind\nof integer order N, for any REAL X. The classical recursion formula is used. Reference:\nC.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N Order of Bessel function. double precision, intent(in) :: X Argument of the Bessel function. Return Value real(kind=8) Calls proc~~bessk~~CallsGraph proc~bessk generate_distribution.f90::BESSK dfloat dfloat proc~bessk->dfloat Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessk.html"},{"title":"BESSK0 – ALPS","text":"function BESSK0(X) This function calculates the modified Bessel function of the third kind of order zero for any positive real argument x. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value real(kind=8) Contents","tags":"","loc":"proc/bessk0.html"},{"title":"BESSK1 – ALPS","text":"function BESSK1(X) This function calculates the modified Bessel function of the third kind of order zero for any positive real argument x. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value real(kind=8) Contents","tags":"","loc":"proc/bessk1.html"},{"title":"BESSI0 – ALPS","text":"function BESSI0(X) This function calculates the modified Bessel function of the first kind of order zero for any positive real argument x. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value real(kind=8) Contents","tags":"","loc":"proc/bessi0~2.html"},{"title":"BESSI1 – ALPS","text":"function BESSI1(X) This function calculates the modified Bessel function of the first kind of order one for any positive real argument x. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value real(kind=8) Contents","tags":"","loc":"proc/bessi1~2.html"},{"title":"disp – ALPS","text":"public  function disp(om) Uses mpi alps_nhds alps_var alps_fns_rel proc~~disp~~UsesGraph proc~disp alps_fns::disp module~alps_fns_rel alps_fns_rel proc~disp->module~alps_fns_rel module~alps_nhds alps_nhds proc~disp->module~alps_nhds module~alps_var alps_var proc~disp->module~alps_var mpi mpi proc~disp->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the determinant of the dispersion tensor for a given frequency om. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex Calls proc~~disp~~CallsGraph proc~disp alps_fns::disp mpi_barrier mpi_barrier proc~disp->mpi_barrier mpi_bcast mpi_bcast proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~disp~~CalledByGraph proc~disp alps_fns::disp proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/disp.html"},{"title":"full_integrate – ALPS","text":"public  function full_integrate(om, nn, mode, found_res) Uses alps_var alps_fns_rel proc~~full_integrate~~UsesGraph proc~full_integrate alps_fns::full_integrate module~alps_fns_rel alps_fns_rel proc~full_integrate->module~alps_fns_rel module~alps_var alps_var proc~full_integrate->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the full integral expression according to Eq. (2.9) in the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). logical, intent(in) :: found_res Check whether a resonance is found. Return Value doublecomplex Calls proc~~full_integrate~~CallsGraph proc~full_integrate alps_fns::full_integrate proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~full_integrate~~CalledByGraph proc~full_integrate alps_fns::full_integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/full_integrate.html"},{"title":"integrate – ALPS","text":"private  function integrate(om, nn, mode, iparmin, iparmax) Uses alps_var proc~~integrate~~UsesGraph proc~integrate alps_fns::integrate module~alps_var alps_var proc~integrate->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function performs the integral in Eq. (2.9) of the code paper, but without\naccounting for the Landau contour integral. It is called by full_integrate . Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer :: iparmin Minimum limit index of parallel momentum for integration. integer :: iparmax Maximum limit index of parallel momentum for integration. Return Value doublecomplex Calls proc~~integrate~~CallsGraph proc~integrate alps_fns::integrate proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~integrate~~CalledByGraph proc~integrate alps_fns::integrate proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res->proc~integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/integrate.html"},{"title":"integrate_res – ALPS","text":"private  function integrate_res(om, nn, mode) Uses alps_var proc~~integrate_res~~UsesGraph proc~integrate_res alps_fns::integrate_res module~alps_var alps_var proc~integrate_res->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function performs the integration near resonances as described in Section 3.1 of the code paper. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~integrate_res~~CallsGraph proc~integrate_res alps_fns::integrate_res proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate alps_fns::integrate proc~integrate_res->proc~integrate proc~int_t alps_fns::int_T proc~funct_g->proc~int_t proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~integrate_res~~CalledByGraph proc~integrate_res alps_fns::integrate_res proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/integrate_res.html"},{"title":"funct_g – ALPS","text":"public  function funct_g(ppar_real, iperp, om, nn, mode) Uses alps_var proc~~funct_g~~UsesGraph proc~funct_g alps_fns::funct_g module~alps_var alps_var proc~funct_g->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the function from Eq. (3.2) of the code paper. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: ppar_real Real part of the momentum at which is evaluated. integer, intent(in) :: iperp Index of the perpendicular momentum. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~funct_g~~CallsGraph proc~funct_g alps_fns::funct_g proc~int_t alps_fns::int_T proc~funct_g->proc~int_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~funct_g~~CalledByGraph proc~funct_g alps_fns::funct_g proc~integrate_res alps_fns::integrate_res proc~integrate_res->proc~funct_g proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/funct_g.html"},{"title":"landau_integrate – ALPS","text":"private  function landau_integrate(om, nn, mode) Uses alps_var alps_analyt proc~~landau_integrate~~UsesGraph proc~landau_integrate alps_fns::landau_integrate module~alps_analyt alps_analyt proc~landau_integrate->module~alps_analyt module~alps_var alps_var proc~landau_integrate->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the Landau contour according to Eqs. (3.8) and (3.9) of the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~landau_integrate~~CallsGraph proc~landau_integrate alps_fns::landau_integrate proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~landau_integrate~~CalledByGraph proc~landau_integrate alps_fns::landau_integrate proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/landau_integrate.html"},{"title":"int_ee – ALPS","text":"public  function int_ee(om) Uses alps_var proc~~int_ee~~UsesGraph proc~int_ee alps_fns::int_ee module~alps_var alps_var proc~int_ee->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the ee term in Eq. (2.9). Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex Called by proc~~int_ee~~CalledByGraph proc~int_ee alps_fns::int_ee proc~disp alps_fns::disp proc~disp->proc~int_ee proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_ee.html"},{"title":"resU – ALPS","text":"private  function resU(om, nn, iperp, ipar) Uses alps_var proc~~resu~~UsesGraph proc~resu alps_fns::resU module~alps_var alps_var proc~resu->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the term proportional to in Eq. (2.9) of the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. integer, intent(in) :: ipar Index to loop over parallel momentum. Return Value doublecomplex Called by proc~~resu~~CalledByGraph proc~resu alps_fns::resU proc~integrate alps_fns::integrate proc~integrate->proc~resu proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res->proc~integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/resu.html"},{"title":"int_T – ALPS","text":"private  function int_T(nn, iperp, ipar, mode) Uses alps_var proc~~int_t~~UsesGraph proc~int_t alps_fns::int_T module~alps_var alps_var proc~int_t->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the T-tensor according to Eq. (2.10) of the code paper. Arguments Type Intent Optional Attributes Name integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. integer, intent(in) :: ipar Index to loop over parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Called by proc~~int_t~~CalledByGraph proc~int_t alps_fns::int_T proc~funct_g alps_fns::funct_g proc~funct_g->proc~int_t proc~integrate alps_fns::integrate proc~integrate->proc~int_t proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res->proc~funct_g proc~integrate_res->proc~integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_t.html"},{"title":"int_T_res – ALPS","text":"private  function int_T_res(nn, iperp, p_res, mode) Uses alps_var proc~~int_t_res~~UsesGraph proc~int_t_res alps_fns::int_T_res module~alps_var alps_var proc~int_t_res->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the T-tensor according to Eq. (2.10) of the code paper for the case in which it is evaluated at the complex resonance momentum. Arguments Type Intent Optional Attributes Name integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. double complex, intent(in) :: p_res Complex resonance momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Called by proc~~int_t_res~~CalledByGraph proc~int_t_res alps_fns::int_T_res proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->proc~int_t_res proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_t_res.html"},{"title":"derivative_f0 – ALPS","text":"public  subroutine derivative_f0() Uses alps_var alps_fns_rel alps_io proc~~derivative_f0~~UsesGraph proc~derivative_f0 alps_fns::derivative_f0 module~alps_fns_rel alps_fns_rel proc~derivative_f0->module~alps_fns_rel module~alps_io alps_io proc~derivative_f0->module~alps_io module~alps_var alps_var proc~derivative_f0->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine calculates the perpendicular and parallel derivatives of the background velocity distribution function f0. Arguments None Calls proc~~derivative_f0~~CallsGraph proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0->proc~derivative_f0_rel proc~get_unused_unit alps_io::get_unused_unit proc~derivative_f0->proc~get_unused_unit proc~derivative_f0_rel->proc~get_unused_unit proc~polyharmonic_spline alps_fns_rel::polyharmonic_spline proc~derivative_f0_rel->proc~polyharmonic_spline dgesv dgesv proc~polyharmonic_spline->dgesv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~derivative_f0~~CalledByGraph proc~derivative_f0 alps_fns::derivative_f0 program~alps alps program~alps->proc~derivative_f0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/derivative_f0.html"},{"title":"determine_resonances – ALPS","text":"public  subroutine determine_resonances(om, nn, found_res_plus, found_res_minus) Uses alps_var alps_io proc~~determine_resonances~~UsesGraph proc~determine_resonances alps_fns::determine_resonances module~alps_io alps_io proc~determine_resonances->module~alps_io module~alps_var alps_var proc~determine_resonances->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine determines whether any kinetic resonances are located in the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of Bessel function. logical, intent(out) :: found_res_plus Check whether a resonance is found at positive n. logical, intent(out) :: found_res_minus Check whether a resonance is found at negative n. Called by proc~~determine_resonances~~CalledByGraph proc~determine_resonances alps_fns::determine_resonances proc~disp alps_fns::disp proc~disp->proc~determine_resonances proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/determine_resonances.html"},{"title":"secant – ALPS","text":"public  subroutine secant(om) Uses mpi alps_var proc~~secant~~UsesGraph proc~secant alps_fns::secant module~alps_var alps_var proc~secant->module~alps_var mpi mpi proc~secant->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine applies the secant method to find the roots of the dispersion tensor. Arguments Type Intent Optional Attributes Name double complex, intent(inout) :: om Complex wave frequency . Calls proc~~secant~~CallsGraph proc~secant alps_fns::secant mpi_barrier mpi_barrier proc~secant->mpi_barrier proc~disp alps_fns::disp proc~secant->proc~disp proc~disp->mpi_barrier mpi_bcast mpi_bcast proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~secant~~CalledByGraph proc~secant alps_fns::secant proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~secant proc~refine_guess alps_fns::refine_guess proc~refine_guess->proc~secant proc~map_search alps_fns::map_search proc~map_search->proc~refine_guess program~alps alps program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess program~alps->proc~map_search Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/secant.html"},{"title":"om_scan – ALPS","text":"public  subroutine om_scan(ik) Uses mpi alps_var alps_io proc~~om_scan~~UsesGraph proc~om_scan alps_fns::om_scan module~alps_io alps_io proc~om_scan->module~alps_io module~alps_var alps_var proc~om_scan->module~alps_var mpi mpi proc~om_scan->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine scans solutions along a single prescribed path in wavevector space. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ik Index of scan number. Calls proc~~om_scan~~CallsGraph proc~om_scan alps_fns::om_scan mpi_barrier mpi_barrier proc~om_scan->mpi_barrier mpi_bcast mpi_bcast proc~om_scan->mpi_bcast proc~alps_error alps_io::alps_error proc~om_scan->proc~alps_error proc~calc_eigen alps_fns::calc_eigen proc~om_scan->proc~calc_eigen proc~determine_bessel_array alps_fns::determine_bessel_array proc~om_scan->proc~determine_bessel_array proc~determine_nmax alps_fns::determine_nmax proc~om_scan->proc~determine_nmax proc~disp alps_fns::disp proc~om_scan->proc~disp proc~get_unused_unit alps_io::get_unused_unit proc~om_scan->proc~get_unused_unit proc~isnancheck alps_io::isnancheck proc~om_scan->proc~isnancheck proc~secant alps_fns::secant proc~om_scan->proc~secant proc~split_processes alps_fns::split_processes proc~om_scan->proc~split_processes mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~calc_eigen->proc~disp proc~bessj alps_fns_rel::BESSJ proc~determine_bessel_array->proc~bessj proc~determine_nmax->mpi_barrier proc~determine_nmax->proc~bessj proc~disp->mpi_barrier proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~secant->mpi_barrier proc~secant->proc~disp float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~bessi->float dfloat dfloat proc~bessi->dfloat proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~om_scan~~CalledByGraph proc~om_scan alps_fns::om_scan program~alps alps program~alps->proc~om_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/om_scan.html"},{"title":"calc_eigen – ALPS","text":"public  subroutine calc_eigen(omega, electric, magnetic, vmean, ds, Ps, eigen_L, heat_L) Uses alps_var proc~~calc_eigen~~UsesGraph proc~calc_eigen alps_fns::calc_eigen module~alps_var alps_var proc~calc_eigen->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine calculates the relative electric and magnetic field amplitudes, the relative fluctuations in the density and velocity of all species, and the heating rates of the given solution.\nIt is based on the calc_eigen routine by Greg Howes and Kris Klein. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: omega Complex wave frequency . double complex, intent(out), dimension(1:3) :: electric Relative electric field amplitude (eigenfunction). double complex, intent(out), dimension(1:3) :: magnetic Relative magnetic field amplitude (eigenfunction). double complex, intent(out), dimension(1:3,1:nspec) :: vmean Relative velocity-fluctuation amplitude (eigenfunction). double complex, intent(out), dimension(1:nspec) :: ds Relative density-fluctuation amplitude (eigenfunction). double precision, intent(out), dimension(1:nspec) :: Ps Relative heating rate of a given species. logical, intent(in) :: eigen_L Check whether eigenfunction calculation is requested. logical, intent(in) :: heat_L Check whether eigenfunction calculation is requested. Calls proc~~calc_eigen~~CallsGraph proc~calc_eigen alps_fns::calc_eigen proc~disp alps_fns::disp proc~calc_eigen->proc~disp mpi_barrier mpi_barrier proc~disp->mpi_barrier mpi_bcast mpi_bcast proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~calc_eigen~~CalledByGraph proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~calc_eigen proc~om_scan alps_fns::om_scan proc~om_scan->proc~calc_eigen program~alps alps program~alps->proc~om_double_scan program~alps->proc~om_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/calc_eigen.html"},{"title":"om_double_scan – ALPS","text":"public  subroutine om_double_scan() Uses mpi alps_var alps_io proc~~om_double_scan~~UsesGraph proc~om_double_scan alps_fns::om_double_scan module~alps_io alps_io proc~om_double_scan->module~alps_io module~alps_var alps_var proc~om_double_scan->module~alps_var mpi mpi proc~om_double_scan->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine scans along a prescribed plane in wavevector space to map out in this space. It is required that n_scan=2. Arguments None Calls proc~~om_double_scan~~CallsGraph proc~om_double_scan alps_fns::om_double_scan mpi_barrier mpi_barrier proc~om_double_scan->mpi_barrier mpi_bcast mpi_bcast proc~om_double_scan->mpi_bcast proc~alps_error alps_io::alps_error proc~om_double_scan->proc~alps_error proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~determine_bessel_array alps_fns::determine_bessel_array proc~om_double_scan->proc~determine_bessel_array proc~determine_nmax alps_fns::determine_nmax proc~om_double_scan->proc~determine_nmax proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~get_unused_unit alps_io::get_unused_unit proc~om_double_scan->proc~get_unused_unit proc~isnancheck alps_io::isnancheck proc~om_double_scan->proc~isnancheck proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~split_processes alps_fns::split_processes proc~om_double_scan->proc~split_processes mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~calc_eigen->proc~disp proc~bessj alps_fns_rel::BESSJ proc~determine_bessel_array->proc~bessj proc~determine_nmax->mpi_barrier proc~determine_nmax->proc~bessj proc~disp->mpi_barrier proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~secant->mpi_barrier proc~secant->proc~disp float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~bessi->float dfloat dfloat proc~bessi->dfloat proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~om_double_scan~~CalledByGraph proc~om_double_scan alps_fns::om_double_scan program~alps alps program~alps->proc~om_double_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/om_double_scan.html"},{"title":"map_search – ALPS","text":"public  subroutine map_search() Uses mpi alps_var alps_io proc~~map_search~~UsesGraph proc~map_search alps_fns::map_search module~alps_io alps_io proc~map_search->module~alps_io module~alps_var alps_var proc~map_search->module~alps_var mpi mpi proc~map_search->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine calculates the map of the determinant of the dispersion tensor in complex frequency space. Arguments None Calls proc~~map_search~~CallsGraph proc~map_search alps_fns::map_search mpi_bcast mpi_bcast proc~map_search->mpi_bcast proc~disp alps_fns::disp proc~map_search->proc~disp proc~find_minima alps_fns::find_minima proc~map_search->proc~find_minima proc~get_unused_unit alps_io::get_unused_unit proc~map_search->proc~get_unused_unit proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~disp->mpi_bcast mpi_barrier mpi_barrier proc~disp->mpi_barrier mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~refine_guess->proc~disp proc~refine_guess->proc~get_unused_unit proc~refine_guess->mpi_barrier proc~secant alps_fns::secant proc~refine_guess->proc~secant proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~secant->proc~disp proc~secant->mpi_barrier proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~map_search~~CalledByGraph proc~map_search alps_fns::map_search program~alps alps program~alps->proc~map_search Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/map_search.html"},{"title":"refine_guess – ALPS","text":"public  subroutine refine_guess() Uses mpi alps_var alps_io proc~~refine_guess~~UsesGraph proc~refine_guess alps_fns::refine_guess module~alps_io alps_io proc~refine_guess->module~alps_io module~alps_var alps_var proc~refine_guess->module~alps_var mpi mpi proc~refine_guess->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine refines the guess at the starting point of the search for solutions to the dispersion relation when scanning. It is also used by map_search to identify the roots on the map. Arguments None Calls proc~~refine_guess~~CallsGraph proc~refine_guess alps_fns::refine_guess mpi_barrier mpi_barrier proc~refine_guess->mpi_barrier proc~disp alps_fns::disp proc~refine_guess->proc~disp proc~get_unused_unit alps_io::get_unused_unit proc~refine_guess->proc~get_unused_unit proc~secant alps_fns::secant proc~refine_guess->proc~secant proc~disp->mpi_barrier mpi_bcast mpi_bcast proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~secant->mpi_barrier proc~secant->proc~disp proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~determine_sproc_rel proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~refine_guess~~CalledByGraph proc~refine_guess alps_fns::refine_guess proc~map_search alps_fns::map_search proc~map_search->proc~refine_guess program~alps alps program~alps->proc~refine_guess program~alps->proc~map_search Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/refine_guess.html"},{"title":"find_minima – ALPS","text":"public  subroutine find_minima(val, numroots, iroots, nroots) Uses alps_var proc~~find_minima~~UsesGraph proc~find_minima alps_fns::find_minima module~alps_var alps_var proc~find_minima->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine identifies the minima of the coarse map grid. It is called by map_search .\nThe code is based on a routine by Greg Howes, 2006. Arguments Type Intent Optional Attributes Name double precision, intent(in), dimension(:,:), pointer :: val Array of determinant of the dispersion tensor. integer, intent(in) :: numroots Number of roots. integer, intent(out), dimension(1:2,1:numroots) :: iroots Indices of roots. integer, intent(out) :: nroots Number of roots found. Called by proc~~find_minima~~CalledByGraph proc~find_minima alps_fns::find_minima proc~map_search alps_fns::map_search proc~map_search->proc~find_minima program~alps alps program~alps->proc~map_search Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/find_minima.html"},{"title":"determine_nmax – ALPS","text":"public  subroutine determine_nmax() Uses mpi alps_var alps_fns_rel proc~~determine_nmax~~UsesGraph proc~determine_nmax alps_fns::determine_nmax module~alps_fns_rel alps_fns_rel proc~determine_nmax->module~alps_fns_rel module~alps_var alps_var proc~determine_nmax->module~alps_var mpi mpi proc~determine_nmax->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine determines the maximum required order of the Bessel functions in Eq. (2.9) of the code paper. Arguments None Calls proc~~determine_nmax~~CallsGraph proc~determine_nmax alps_fns::determine_nmax mpi_barrier mpi_barrier proc~determine_nmax->mpi_barrier proc~bessj alps_fns_rel::BESSJ proc~determine_nmax->proc~bessj float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~determine_nmax~~CalledByGraph proc~determine_nmax alps_fns::determine_nmax proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~determine_nmax proc~om_scan alps_fns::om_scan proc~om_scan->proc~determine_nmax program~alps alps program~alps->proc~determine_nmax program~alps->proc~om_double_scan program~alps->proc~om_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/determine_nmax.html"},{"title":"split_processes – ALPS","text":"public  subroutine split_processes() Uses alps_var proc~~split_processes~~UsesGraph proc~split_processes alps_fns::split_processes module~alps_var alps_var proc~split_processes->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine defines the tasks for the individual processes. It uses the number of species and the required orders of the Bessel functions to define the splitting across the MPI processes. Arguments None Called by proc~~split_processes~~CalledByGraph proc~split_processes alps_fns::split_processes proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~split_processes proc~om_scan alps_fns::om_scan proc~om_scan->proc~split_processes program~alps alps program~alps->proc~split_processes program~alps->proc~om_double_scan program~alps->proc~om_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/split_processes.html"},{"title":"determine_bessel_array – ALPS","text":"public  subroutine determine_bessel_array() Uses alps_var alps_fns_rel alps_io proc~~determine_bessel_array~~UsesGraph proc~determine_bessel_array alps_fns::determine_bessel_array module~alps_fns_rel alps_fns_rel proc~determine_bessel_array->module~alps_fns_rel module~alps_io alps_io proc~determine_bessel_array->module~alps_io module~alps_var alps_var proc~determine_bessel_array->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine determines the array of Bessel functions that is used in the T-tensor of Eq. (2.10) of the code paper. Arguments None Calls proc~~determine_bessel_array~~CallsGraph proc~determine_bessel_array alps_fns::determine_bessel_array proc~bessj alps_fns_rel::BESSJ proc~determine_bessel_array->proc~bessj float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~determine_bessel_array~~CalledByGraph proc~determine_bessel_array alps_fns::determine_bessel_array proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~determine_bessel_array proc~om_scan alps_fns::om_scan proc~om_scan->proc~determine_bessel_array program~alps alps program~alps->proc~determine_bessel_array program~alps->proc~om_double_scan program~alps->proc~om_scan Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/determine_bessel_array.html"},{"title":"pass_instructions – ALPS","text":"public  subroutine pass_instructions() Uses mpi alps_var proc~~pass_instructions~~UsesGraph proc~pass_instructions alps_com::pass_instructions module~alps_var alps_var proc~pass_instructions->module~alps_var mpi mpi proc~pass_instructions->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Passes information between processes. Arguments None Calls proc~~pass_instructions~~CallsGraph proc~pass_instructions alps_com::pass_instructions mpi_bcast mpi_bcast proc~pass_instructions->mpi_bcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~pass_instructions~~CalledByGraph proc~pass_instructions alps_com::pass_instructions program~alps alps program~alps->proc~pass_instructions Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/pass_instructions.html"},{"title":"pass_distribution – ALPS","text":"public  subroutine pass_distribution() Uses mpi alps_var proc~~pass_distribution~~UsesGraph proc~pass_distribution alps_com::pass_distribution module~alps_var alps_var proc~pass_distribution->module~alps_var mpi mpi proc~pass_distribution->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Passes distribution functions and associated parameters. Arguments None Calls proc~~pass_distribution~~CallsGraph proc~pass_distribution alps_com::pass_distribution mpi_bcast mpi_bcast proc~pass_distribution->mpi_bcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~pass_distribution~~CalledByGraph proc~pass_distribution alps_com::pass_distribution program~alps alps program~alps->proc~pass_distribution Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/pass_distribution.html"},{"title":"besselI – ALPS","text":"private  function besselI(n, x) Calculates the modified Bessel function of argument x and order n. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Order of the modified Bessel function. double precision, intent(in) :: x Argument of the modified Bessel function. Return Value doubleprecision Calls proc~~besseli~~CallsGraph proc~besseli alps_nhds::besselI proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~besseli~~CalledByGraph proc~besseli alps_nhds::besselI proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~calc_ypsilon->proc~besseli proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/besseli.html"},{"title":"dispfunct – ALPS","text":"private  function dispfunct(zeta, kpos) Calculates the dispersion function based on the complex error function. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: zeta Argument of dispersion function. logical, intent(in) :: kpos Check whether kpar is positive. Return Value doublecomplex Calls proc~~dispfunct~~CallsGraph proc~dispfunct alps_nhds::dispfunct proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~dispfunct~~CalledByGraph proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_ypsilon->proc~dispfunct proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~calc_ypsilon proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/dispfunct.html"},{"title":"BESSI – ALPS","text":"private  function BESSI(N, X) Function to calculate the first kind modified Bessel function of integer order N\nfor any real X. Arguments Type Intent Optional Attributes Name integer :: N real(kind=8) :: X Return Value doubleprecision Calls proc~~bessi~~CallsGraph proc~bessi alps_nhds::BESSI dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessi~~CalledByGraph proc~bessi alps_nhds::BESSI proc~besseli alps_nhds::besselI proc~besseli->proc~bessi proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~calc_ypsilon->proc~besseli proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessi.html"},{"title":"BESSI0 – ALPS","text":"private  function BESSI0(X) Auxiliary Bessel functions for N=0, N=1 Arguments Type Intent Optional Attributes Name real(kind=8) :: X Return Value doubleprecision Called by proc~~bessi0~~CalledByGraph proc~bessi0 alps_nhds::BESSI0 proc~bessi alps_nhds::BESSI proc~bessi->proc~bessi0 proc~besseli alps_nhds::besselI proc~besseli->proc~bessi proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~calc_ypsilon->proc~besseli proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessi0.html"},{"title":"BESSI1 – ALPS","text":"private  function BESSI1(X) Modified Bessel function of order 1. Arguments Type Intent Optional Attributes Name real(kind=8) :: X Return Value doubleprecision Called by proc~~bessi1~~CalledByGraph proc~bessi1 alps_nhds::BESSI1 proc~bessi alps_nhds::BESSI proc~bessi->proc~bessi1 proc~besseli alps_nhds::besselI proc~besseli->proc~bessi proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~calc_ypsilon->proc~besseli proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessi1.html"},{"title":"calc_chi – ALPS","text":"public  subroutine calc_chi(chi, j, kz, kperp, x) Uses alps_var proc~~calc_chi~~UsesGraph proc~calc_chi alps_nhds::calc_chi module~alps_var alps_var proc~calc_chi->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine that calculates the susceptibility of species j based on NHDS. Arguments Type Intent Optional Attributes Name double complex, intent(out) :: chi (3,3) Susceptibility tensor of species j. integer, intent(in) :: j Index for species. double precision, intent(in) :: kz Normalised parallel wavenumber. double precision, intent(in) :: kperp Normalised perpendicular wavenumber. double complex, intent(in) :: x Normalised complex frequency. Calls proc~~calc_chi~~CallsGraph proc~calc_chi alps_nhds::calc_chi proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~calc_chi~~CalledByGraph proc~calc_chi alps_nhds::calc_chi proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/calc_chi.html"},{"title":"calc_ypsilon – ALPS","text":"private  subroutine calc_ypsilon(Y, j, n, kz, kperp, x) Uses alps_var proc~~calc_ypsilon~~UsesGraph proc~calc_ypsilon alps_nhds::calc_ypsilon module~alps_var alps_var proc~calc_ypsilon->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calculates the Y-tensor according to Stix for a bi-Maxwelling, using the NHDS calculation. Arguments Type Intent Optional Attributes Name double complex, intent(out) :: Y (3,3) integer, intent(in) :: j Index for species. integer, intent(in) :: n Index of sum over Bessel functions. double precision, intent(in) :: kz Normalised parallel wavenumber. double precision, intent(in) :: kperp Normalised perpendicular wavenumber. double complex, intent(in) :: x Normalised complex frequency. Calls proc~~calc_ypsilon~~CallsGraph proc~calc_ypsilon alps_nhds::calc_ypsilon proc~besseli alps_nhds::besselI proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz dfloat dfloat proc~bessi->dfloat float float proc~bessi->float proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~calc_ypsilon~~CalledByGraph proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~calc_ypsilon proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/calc_ypsilon.html"},{"title":"WOFZ – ALPS","text":"private  subroutine WOFZ(XI, YI, U, V, FLAG) Given a complex number Z = (XI,YI), this subroutine computes\n the value of the Faddeeva function W(Z) = exp(-Z 2) erfc(-I Z),\n where erfc is the complex complementary error function and I\nis the imaginary unit. Arguments Type Intent Optional Attributes Name real :: XI real :: YI real :: U real :: V logical :: FLAG Calls proc~~wofz~~CallsGraph proc~wofz alps_nhds::WOFZ dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~wofz~~CalledByGraph proc~wofz alps_nhds::WOFZ proc~dispfunct alps_nhds::dispfunct proc~dispfunct->proc~wofz proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_ypsilon->proc~dispfunct proc~calc_chi alps_nhds::calc_chi proc~calc_chi->proc~calc_ypsilon proc~disp alps_fns::disp proc~disp->proc~calc_chi proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/wofz.html"},{"title":"eval_fit – ALPS","text":"public  function eval_fit(is, iperp, ppar_valC) Uses alps_var alps_distribution_analyt proc~~eval_fit~~UsesGraph proc~eval_fit alps_analyt::eval_fit module~alps_distribution_analyt alps_distribution_analyt proc~eval_fit->module~alps_distribution_analyt module~alps_var alps_var proc~eval_fit->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the fit to f0 at and the complex parallel\nmomentum ppar_valC. It requires the fit parameters that will be determined\nby the subroutine determine_param_fit . Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which eval_fit is executed. integer, intent(in) :: iperp Index of perpendicular momentum at which eval_fit is executed. double complex, intent(in) :: ppar_valC Complex parallel momentum at which eval_fit is executed. Return Value doublecomplex Calls proc~~eval_fit~~CallsGraph proc~eval_fit alps_analyt::eval_fit proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~eval_fit~~CalledByGraph proc~eval_fit alps_analyt::eval_fit proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->proc~eval_fit proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~eval_fit proc~output_fit alps_analyt::output_fit proc~output_fit->proc~eval_fit proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~output_fit proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate program~alps alps program~alps->proc~determine_param_fit proc~map_search alps_fns::map_search program~alps->proc~map_search proc~om_double_scan alps_fns::om_double_scan program~alps->proc~om_double_scan proc~om_scan alps_fns::om_scan program~alps->proc~om_scan proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/eval_fit.html"},{"title":"fit_function – ALPS","text":"private  function fit_function(is, n_params, params, pperp_val, ppar_val) Uses alps_var proc~~fit_function~~UsesGraph proc~fit_function alps_analyt::fit_function module~alps_var alps_var proc~fit_function->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the fit to f0 at real pperp_val and complex ppar_val,\nprovided that the one-dimensional fit-parameter array params is fed into the\nfunction. This is only used during the fitting. For the evaluation in ALPS,\nuse eval_fit . Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which eval_fit is executed. integer, intent(in) :: n_params Total number of fit parameters for a given species. double precision, intent(in) :: params (n_params) Array of fit parameters. double precision, intent(in) :: pperp_val Perpendicular momentum. double complex, intent(in) :: ppar_val Complex parallel momentum. Return Value doublecomplex Called by proc~~fit_function~~CalledByGraph proc~fit_function alps_analyt::fit_function proc~eval_fit alps_analyt::eval_fit proc~eval_fit->proc~fit_function proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->proc~fit_function proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~lm_nonlinear_fit proc~output_fit alps_analyt::output_fit proc~determine_param_fit->proc~output_fit proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->proc~eval_fit proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~eval_fit proc~output_fit->proc~eval_fit proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate proc~full_integrate->proc~landau_integrate_rel program~alps alps program~alps->proc~determine_param_fit proc~map_search alps_fns::map_search program~alps->proc~map_search proc~om_double_scan alps_fns::om_double_scan program~alps->proc~om_double_scan proc~om_scan alps_fns::om_scan program~alps->proc~om_scan proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/fit_function.html"},{"title":"determine_param_fit – ALPS","text":"public  subroutine determine_param_fit() Uses alps_var proc~~determine_param_fit~~UsesGraph proc~determine_param_fit alps_analyt::determine_param_fit module~alps_var alps_var proc~determine_param_fit->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This is the fitting routine for the hybrid analytic continuation. It determines\nthe full field param_fit . Arguments None Calls proc~~determine_param_fit~~CallsGraph proc~determine_param_fit alps_analyt::determine_param_fit proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~determine_param_fit->proc~lm_nonlinear_fit proc~output_fit alps_analyt::output_fit proc~determine_param_fit->proc~output_fit dgetrf dgetrf proc~lm_nonlinear_fit->dgetrf dgetri dgetri proc~lm_nonlinear_fit->dgetri proc~alps_error alps_io::alps_error proc~lm_nonlinear_fit->proc~alps_error proc~determine_jt alps_analyt::determine_JT proc~lm_nonlinear_fit->proc~determine_jt proc~fit_function alps_analyt::fit_function proc~lm_nonlinear_fit->proc~fit_function proc~output_fit->proc~alps_error proc~eval_fit alps_analyt::eval_fit proc~output_fit->proc~eval_fit proc~isnancheck alps_io::isnancheck proc~output_fit->proc~isnancheck mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~eval_fit->proc~fit_function proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~determine_param_fit~~CalledByGraph proc~determine_param_fit alps_analyt::determine_param_fit program~alps alps program~alps->proc~determine_param_fit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/determine_param_fit.html"},{"title":"output_fit – ALPS","text":"private  subroutine output_fit(qualitytotal) Uses alps_var alps_io proc~~output_fit~~UsesGraph proc~output_fit alps_analyt::output_fit module~alps_io alps_io proc~output_fit->module~alps_io module~alps_var alps_var proc~output_fit->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine outputs the fit parameters for iperp=0 to stdout to monitor the fit. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: qualitytotal Quality of the total fit result. Calls proc~~output_fit~~CallsGraph proc~output_fit alps_analyt::output_fit proc~alps_error alps_io::alps_error proc~output_fit->proc~alps_error proc~eval_fit alps_analyt::eval_fit proc~output_fit->proc~eval_fit proc~isnancheck alps_io::isnancheck proc~output_fit->proc~isnancheck mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~output_fit~~CalledByGraph proc~output_fit alps_analyt::output_fit proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~output_fit program~alps alps program~alps->proc~determine_param_fit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/output_fit.html"},{"title":"determine_JT – ALPS","text":"private  subroutine determine_JT(is, n_params, nJT, JT, params, iperp, upper_limit, ipparbar_lower) Uses alps_var proc~~determine_jt~~UsesGraph proc~determine_jt alps_analyt::determine_JT module~alps_var alps_var proc~determine_jt->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine calculates the transposed Jacobian matrix of the fit function with respect to the\nfit parameter array. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which determine_JT is executed. integer, intent(in) :: n_params Total number of fit parameters for a given species. integer, intent(in) :: nJT First dimension of matrix JT. double precision, intent(out) :: JT (nJT,0:upper_limit) Transposed Jacobian matrix of the fit function. double precision, intent(in) :: params (n_params) Array of fit parameters. integer, intent(in) :: iperp Index of perpendicular momentum at which JT is evaluated. integer, intent(in) :: upper_limit Upper limit of iperp space (relativistic and non-relativistic). integer, intent(in) :: ipparbar_lower Lower index of parallel momentum (relativistic). Called by proc~~determine_jt~~CalledByGraph proc~determine_jt alps_analyt::determine_JT proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->proc~determine_jt proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~lm_nonlinear_fit program~alps alps program~alps->proc~determine_param_fit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/determine_jt.html"},{"title":"LM_nonlinear_fit – ALPS","text":"private  subroutine LM_nonlinear_fit(is, g, n_params, nJT, params, param_mask, iperp, npar, ipparbar_lower, quality) Uses mpi alps_var alps_io proc~~lm_nonlinear_fit~~UsesGraph proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit module~alps_io alps_io proc~lm_nonlinear_fit->module~alps_io module~alps_var alps_var proc~lm_nonlinear_fit->module~alps_var mpi mpi proc~lm_nonlinear_fit->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine processes the nonlinear Levenberg-Marquart algorithm and returns\nthe one-dimensional array params at a given iperp.\nThe variable quality is the sum of the squares of all residuals. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which LM_nonlinear_fit is executed. double precision, intent(in) :: g (0:npar) Array of function to be fitted. integer, intent(in) :: n_params Total number of fit parameters for a given species. integer, intent(in) :: nJT First dimension of matrix JT (see determine_JT ). double precision, intent(inout) :: params (n_params) Array of fit parameters. logical, intent(in) :: param_mask (n_params) Bit mask for required fit parameters. integer, intent(in) :: iperp Index of perpendicular momentum. integer, intent(in) :: npar Number of steps in parallel momentum integer, intent(in) :: ipparbar_lower Lower index of parallel momentum (relativistic). double precision, intent(out) :: quality Quality of the individual fit result. Calls proc~~lm_nonlinear_fit~~CallsGraph proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit dgetrf dgetrf proc~lm_nonlinear_fit->dgetrf dgetri dgetri proc~lm_nonlinear_fit->dgetri proc~alps_error alps_io::alps_error proc~lm_nonlinear_fit->proc~alps_error proc~determine_jt alps_analyt::determine_JT proc~lm_nonlinear_fit->proc~determine_jt proc~fit_function alps_analyt::fit_function proc~lm_nonlinear_fit->proc~fit_function mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~lm_nonlinear_fit~~CalledByGraph proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~lm_nonlinear_fit program~alps alps program~alps->proc~determine_param_fit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/lm_nonlinear_fit.html"},{"title":"integrate_res_rel – ALPS","text":"public  function integrate_res_rel(om, nn, mode) Uses alps_var proc~~integrate_res_rel~~UsesGraph proc~integrate_res_rel alps_fns_rel::integrate_res_rel module~alps_var alps_var proc~integrate_res_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function performs the integration near resonances as described in Section 3.1 of the code paper for a relativistic calculation. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~integrate_res_rel~~CallsGraph proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~integrate_res_rel~~CalledByGraph proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/integrate_res_rel.html"},{"title":"integrate_resU_rel – ALPS","text":"private  function integrate_resU_rel(sproc_rel, om, nn, mode, igamma) Uses alps_var alps_io proc~~integrate_resu_rel~~UsesGraph proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel module~alps_io alps_io proc~integrate_resu_rel->module~alps_io module~alps_var alps_var proc~integrate_resu_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the integral with the integrand proportional to in Eq. (2.9) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer, intent(in) :: igamma Index to loop over . Return Value doublecomplex Calls proc~~integrate_resu_rel~~CallsGraph proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~alps_error alps_io::alps_error proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~integrate_resu_rel~~CalledByGraph proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/integrate_resu_rel.html"},{"title":"principal_integral_rel – ALPS","text":"public  function principal_integral_rel(sproc_rel, om, nn, mode, igamma, ipparbar_res, upperlimit) Uses alps_var proc~~principal_integral_rel~~UsesGraph proc~principal_integral_rel alps_fns_rel::principal_integral_rel module~alps_var alps_var proc~principal_integral_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function performs the integration near resonances as described in Section 3.1 of the code paper for a relativistic calculation. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar_res Index of the nearest relativistic parallel momentum to the resonance. integer, intent(in) :: upperlimit Index of upper limit for integration according to Eq. (3.5). Return Value doublecomplex Calls proc~~principal_integral_rel~~CallsGraph proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel proc~int_t_rel alps_fns_rel::int_T_rel proc~funct_g_rel->proc~int_t_rel proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~principal_integral_rel~~CalledByGraph proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/principal_integral_rel.html"},{"title":"funct_g_rel – ALPS","text":"private  function funct_g_rel(sproc_rel, pparbar, igamma, om, nn, mode) Uses alps_var proc~~funct_g_rel~~UsesGraph proc~funct_g_rel alps_fns_rel::funct_g_rel module~alps_var alps_var proc~funct_g_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the function from Eq. (3.2) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double precision, intent(in) :: pparbar Relativistic parallel momentum. integer, intent(in) :: igamma Index of . double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~funct_g_rel~~CallsGraph proc~funct_g_rel alps_fns_rel::funct_g_rel proc~int_t_rel alps_fns_rel::int_T_rel proc~funct_g_rel->proc~int_t_rel proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~funct_g_rel~~CalledByGraph proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~principal_integral_rel->proc~funct_g_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/funct_g_rel.html"},{"title":"landau_integrate_rel – ALPS","text":"public  function landau_integrate_rel(om, nn, mode) Uses alps_var alps_analyt proc~~landau_integrate_rel~~UsesGraph proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel module~alps_analyt alps_analyt proc~landau_integrate_rel->module~alps_analyt module~alps_var alps_var proc~landau_integrate_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the Landau contour according to Eqs. (3.8) and (3.9) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~landau_integrate_rel~~CallsGraph proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~landau_integrate_rel->proc~determine_sproc_rel proc~eval_fit alps_analyt::eval_fit proc~landau_integrate_rel->proc~eval_fit proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~fit_function alps_analyt::fit_function proc~eval_fit->proc~fit_function proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~landau_integrate_rel~~CalledByGraph proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/landau_integrate_rel.html"},{"title":"int_ee_rel – ALPS","text":"public  function int_ee_rel(om) Uses alps_var proc~~int_ee_rel~~UsesGraph proc~int_ee_rel alps_fns_rel::int_ee_rel module~alps_var alps_var proc~int_ee_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the ee term in Eq. (2.9) for the relativistic calculation. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex Calls proc~~int_ee_rel~~CallsGraph proc~int_ee_rel alps_fns_rel::int_ee_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~int_ee_rel~~CalledByGraph proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp alps_fns::disp proc~disp->proc~int_ee_rel proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_ee_rel.html"},{"title":"resU_rel – ALPS","text":"public  function resU_rel(sproc_rel, om, nn, igamma, ipparbar) Uses alps_var proc~~resu_rel~~UsesGraph proc~resu_rel alps_fns_rel::resU_rel module~alps_var alps_var proc~resu_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function evaluates the term proportional to in Eq. (2.9) of the code paper for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar Index to loop over relativistic parallel momentum. Return Value doublecomplex Called by proc~~resu_rel~~CalledByGraph proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~resu_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/resu_rel.html"},{"title":"int_T_rel – ALPS","text":"private  function int_T_rel(sproc_rel, nn, igamma, ipparbar, mode) Uses alps_var proc~~int_t_rel~~UsesGraph proc~int_t_rel alps_fns_rel::int_T_rel module~alps_var alps_var proc~int_t_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the T-tensor according to Eq. (2.10) of the code paper for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar Index to loop over relativistic parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~int_t_rel~~CallsGraph proc~int_t_rel alps_fns_rel::int_T_rel proc~bessj alps_fns_rel::BESSJ proc~int_t_rel->proc~bessj float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~int_t_rel~~CalledByGraph proc~int_t_rel alps_fns_rel::int_T_rel proc~funct_g_rel alps_fns_rel::funct_g_rel proc~funct_g_rel->proc~int_t_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~principal_integral_rel->proc~funct_g_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_t_rel.html"},{"title":"int_T_res_rel – ALPS","text":"private  function int_T_res_rel(sproc_rel, nn, igamma, pparbar, mode) Uses alps_var proc~~int_t_res_rel~~UsesGraph proc~int_t_res_rel alps_fns_rel::int_T_res_rel module~alps_var alps_var proc~int_t_res_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This function returns the T-tensor according to Eq. (2.10) of the code paper for the case in which it is evaluated at the complex resonance momentum for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . double complex, intent(in) :: pparbar Relativistic parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Calls proc~~int_t_res_rel~~CallsGraph proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~int_t_res_rel~~CalledByGraph proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/int_t_res_rel.html"},{"title":"Fact – ALPS","text":"private  function Fact(k) This function returns the factorial k! of its argument k. Arguments Type Intent Optional Attributes Name integer, intent(in) :: k Argument of the factorial. Return Value doubleprecision Called by proc~~fact~~CalledByGraph proc~fact alps_fns_rel::Fact proc~cbessj alps_fns_rel::CBESSJ proc~cbessj->proc~fact proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~int_t_res_rel->proc~cbessj proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/fact.html"},{"title":"BESSJ – ALPS","text":"public  function BESSJ(N, X) This function calculates the first kind Bessel function\nof integer order N, for any REAL X. We use here the classical\nrecursion formula, when X > N. For X < N, Miller's algorithm\nis used to avoid overflows. Reference:\nC.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N Order of Bessel function. double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision Calls proc~~bessj~~CallsGraph proc~bessj alps_fns_rel::BESSJ float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~bessj~~CalledByGraph proc~bessj alps_fns_rel::BESSJ proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->proc~bessj proc~determine_nmax alps_fns::determine_nmax proc~determine_nmax->proc~bessj proc~int_t_rel alps_fns_rel::int_T_rel proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~funct_g_rel->proc~int_t_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~determine_bessel_array proc~om_double_scan->proc~determine_nmax proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~determine_bessel_array proc~om_scan->proc~determine_nmax proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant program~alps alps program~alps->proc~determine_bessel_array program~alps->proc~determine_nmax program~alps->proc~om_double_scan program~alps->proc~om_scan proc~map_search alps_fns::map_search program~alps->proc~map_search proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~principal_integral_rel->proc~funct_g_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp->proc~full_integrate proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessj.html"},{"title":"BESSJ0 – ALPS","text":"public  function BESSJ0(X) This function calculates the first kind Bessel function\nof order 0, for any REAL X. The polynomial approximation by\nseries of Chebyshev polynomials is used for 0<X<8 and 0<8/X<1. References:\nM.Abramowitz, I.A.Stegun, Handbook of Mathematical Functions, 1965. C.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision Called by proc~~bessj0~~CalledByGraph proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj alps_fns_rel::BESSJ proc~bessj->proc~bessj0 proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->proc~bessj proc~determine_nmax alps_fns::determine_nmax proc~determine_nmax->proc~bessj proc~int_t_rel alps_fns_rel::int_T_rel proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~funct_g_rel->proc~int_t_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~determine_bessel_array proc~om_double_scan->proc~determine_nmax proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~determine_bessel_array proc~om_scan->proc~determine_nmax proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant program~alps alps program~alps->proc~determine_bessel_array program~alps->proc~determine_nmax program~alps->proc~om_double_scan program~alps->proc~om_scan proc~map_search alps_fns::map_search program~alps->proc~map_search proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~principal_integral_rel->proc~funct_g_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp->proc~full_integrate proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessj0.html"},{"title":"BESSJ1 – ALPS","text":"public  function BESSJ1(X) This subroutine calculates the First Kind Bessel Function of\norder 1, for any real number X. The polynomial approximation by\nseries of Chebyshev polynomials is used for 0<X<8 and 0<8/X<1. References:\nM.Abramowitz, I.A.Stegun, Handbook of Mathematical Functions, 1965. C.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision Called by proc~~bessj1~~CalledByGraph proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj alps_fns_rel::BESSJ proc~bessj->proc~bessj1 proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->proc~bessj proc~determine_nmax alps_fns::determine_nmax proc~determine_nmax->proc~bessj proc~int_t_rel alps_fns_rel::int_T_rel proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~funct_g_rel->proc~int_t_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~determine_bessel_array proc~om_double_scan->proc~determine_nmax proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~determine_bessel_array proc~om_scan->proc~determine_nmax proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant program~alps alps program~alps->proc~determine_bessel_array program~alps->proc~determine_nmax program~alps->proc~om_double_scan program~alps->proc~om_scan proc~map_search alps_fns::map_search program~alps->proc~map_search proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~principal_integral_rel->proc~funct_g_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp->proc~full_integrate proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bessj1.html"},{"title":"Gamma – ALPS","text":"public  function Gamma(xx) This function returns the Gamma-function. Arguments Type Intent Optional Attributes Name double precision :: xx Argument of the Gamma-function. Return Value doubleprecision Contents","tags":"","loc":"proc/gamma.html"},{"title":"derivative_f0_rel – ALPS","text":"public  subroutine derivative_f0_rel(is, is_rel) Uses alps_var alps_io proc~~derivative_f0_rel~~UsesGraph proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel module~alps_io alps_io proc~derivative_f0_rel->module~alps_io module~alps_var alps_var proc~derivative_f0_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine calculates the derivatives of the background velocity distribution function f0 for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of particle species. integer, intent(in) :: is_rel Index for relativistic species (if any). Calls proc~~derivative_f0_rel~~CallsGraph proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~get_unused_unit alps_io::get_unused_unit proc~derivative_f0_rel->proc~get_unused_unit proc~polyharmonic_spline alps_fns_rel::polyharmonic_spline proc~derivative_f0_rel->proc~polyharmonic_spline dgesv dgesv proc~polyharmonic_spline->dgesv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~derivative_f0_rel~~CalledByGraph proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->proc~derivative_f0_rel program~alps alps program~alps->proc~derivative_f0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/derivative_f0_rel.html"},{"title":"polyharmonic_spline – ALPS","text":"public  subroutine polyharmonic_spline(grid_coarse, gamma_coarse, pparbar_coarse, n_coarse, gamma_rel, pparbar, ngamma, npparbar, smoothing, f0_rel, is_rel, nspec_rel) This soubroutine interpolates the grid with a polyharmonic thin-plate spline.\nThis subroutine needs the LUPACK and BLAS libraries to evoke the dgesv subroutine.\nThe method uses the Thin Plate Spline.\nWe use these resources: http://cseweb.ucsd.edu/~sjb/eccv_tps.pdf http://www.univie.ac.at/nuhag-php/bibtex/open_files/po94_M%20J%20D%20Powell%2003%2093.pdf http://vision.ucsd.edu/sites/default/files/fulltext(4).pdf Arguments Type Intent Optional Attributes Name double precision, intent(in) :: grid_coarse (n_coarse) Coarse input grid for interpolation. double precision, intent(in) :: gamma_coarse (n_coarse) Coordinates of on coarse grid. double precision, intent(in) :: pparbar_coarse (n_coarse) Coordinates of relativistic parallel momentum on coarse grid. integer, intent(in) :: n_coarse Number of entries in coarse grid. double precision, intent(in) :: gamma_rel (nspec_rel,0:ngamma,0:npparbar) Coordinates of on fine grid. double precision, intent(in) :: pparbar (nspec_rel,0:ngamma,0:npparbar) Coordinates of relativistic parallel momentum on fine grid. integer, intent(in) :: ngamma Number of steps on fine output grid. integer, intent(in) :: npparbar Number of parallel momentum steps on fine output grid. double precision, intent(in) :: smoothing Smoothing parameter for spline interpolation. double precision, intent(out) :: f0_rel (nspec_rel,0:ngamma,0:npparbar) Fine output grid after interpolation. integer :: is_rel Index for relativistic species (if any). integer :: nspec_rel Number of relativistic species. Calls proc~~polyharmonic_spline~~CallsGraph proc~polyharmonic_spline alps_fns_rel::polyharmonic_spline dgesv dgesv proc~polyharmonic_spline->dgesv Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~polyharmonic_spline~~CalledByGraph proc~polyharmonic_spline alps_fns_rel::polyharmonic_spline proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0_rel->proc~polyharmonic_spline proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->proc~derivative_f0_rel program~alps alps program~alps->proc~derivative_f0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/polyharmonic_spline.html"},{"title":"determine_sproc_rel – ALPS","text":"private  subroutine determine_sproc_rel(sproc_rel) Uses alps_var proc~~determine_sproc_rel~~UsesGraph proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel module~alps_var alps_var proc~determine_sproc_rel->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This subroutine determines sproc_rel for the given process. Arguments Type Intent Optional Attributes Name integer, intent(out) :: sproc_rel is_rel of the current process. Called by proc~~determine_sproc_rel~~CalledByGraph proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel alps_fns_rel::int_ee_rel proc~int_ee_rel->proc~determine_sproc_rel proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~determine_sproc_rel proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~determine_sproc_rel proc~disp alps_fns::disp proc~disp->proc~int_ee_rel proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~full_integrate->proc~integrate_res_rel proc~full_integrate->proc~landau_integrate_rel proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/determine_sproc_rel.html"},{"title":"CBESSJ – ALPS","text":"public  subroutine CBESSJ(z, nu, z1) This subroutine calculates the complex Bessel function. It is based on the CBESSJ function release 1.1 by J-P Moreau, Paris (www.jpmoreau.fr). Arguments Type Intent Optional Attributes Name double complex, intent(in) :: z Argument of the Bessel function. integer, intent(in) :: nu Order of Bessel function. double complex, intent(out) :: z1 Resulting value of Bessel function. Calls proc~~cbessj~~CallsGraph proc~cbessj alps_fns_rel::CBESSJ proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~cbessj~~CalledByGraph proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~int_t_res_rel->proc~cbessj proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search alps_fns::map_search proc~map_search->proc~disp proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp program~alps alps program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/cbessj.html"},{"title":"input_unit_exist – ALPS","text":"private  function input_unit_exist(nml, exist) Determine if a particular namelist already opened. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist to be opened. logical, intent(out) :: exist Determination if namelist is open. Return Value integer I/O dummy indices. Called by proc~~input_unit_exist~~CalledByGraph proc~input_unit_exist alps_io::input_unit_exist proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->proc~input_unit_exist proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit_exist proc~init_param alps_io::init_param proc~init_param->proc~get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_namelist_unit program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/input_unit_exist.html"},{"title":"input_unit – ALPS","text":"private  function input_unit(nml) Assigns input unit for namelist opening. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist string. Return Value integer I/O dummy indices. Called by proc~~input_unit~~CalledByGraph proc~input_unit alps_io::input_unit proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->proc~input_unit proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~input_unit proc~init_param alps_io::init_param proc~init_param->proc~get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_namelist_unit program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/input_unit.html"},{"title":"isnancheck – ALPS","text":"public  function isnancheck(input) Checks if double precision number input is NaN. Arguments Type Intent Optional Attributes Name double precision :: input Variable to be checked. Return Value logical Called by proc~~isnancheck~~CalledByGraph proc~isnancheck alps_io::isnancheck proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~isnancheck proc~om_scan alps_fns::om_scan proc~om_scan->proc~isnancheck proc~output_fit alps_analyt::output_fit proc~output_fit->proc~isnancheck proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~output_fit program~alps alps program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~determine_param_fit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/isnancheck.html"},{"title":"init_param – ALPS","text":"public  subroutine init_param() Uses alps_var proc~~init_param~~UsesGraph proc~init_param alps_io::init_param module~alps_var alps_var proc~init_param->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Read in system parameters from *.in file.\nOnly processor 0 calls this routine: Arguments None Calls proc~~init_param~~CallsGraph proc~init_param alps_io::init_param proc~bm_read alps_io::bM_read proc~init_param->proc~bm_read proc~fit_read alps_io::fit_read proc~init_param->proc~fit_read proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_double_namelist_unit proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~init_param->proc~get_indexed_namelist_unit proc~get_unused_unit alps_io::get_unused_unit proc~init_param->proc~get_unused_unit proc~map_read alps_io::map_read proc~init_param->proc~map_read proc~scan_read alps_io::scan_read proc~init_param->proc~scan_read proc~solution_read alps_io::solution_read proc~init_param->proc~solution_read proc~spec_read alps_io::spec_read proc~init_param->proc~spec_read proc~get_indexed_double_namelist_unit->proc~get_unused_unit proc~alps_error alps_io::alps_error proc~get_indexed_double_namelist_unit->proc~alps_error proc~input_unit alps_io::input_unit proc~get_indexed_double_namelist_unit->proc~input_unit proc~input_unit_exist alps_io::input_unit_exist proc~get_indexed_double_namelist_unit->proc~input_unit_exist proc~get_indexed_namelist_unit->proc~get_unused_unit proc~get_indexed_namelist_unit->proc~alps_error proc~get_indexed_namelist_unit->proc~input_unit proc~get_indexed_namelist_unit->proc~input_unit_exist mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~init_param~~CalledByGraph proc~init_param alps_io::init_param program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/init_param.html"},{"title":"map_read – ALPS","text":"private  subroutine map_read() Uses alps_var proc~~map_read~~UsesGraph proc~map_read alps_io::map_read module~alps_var alps_var proc~map_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Reads in complex frequency map parameters. Arguments None Called by proc~~map_read~~CalledByGraph proc~map_read alps_io::map_read proc~init_param alps_io::init_param proc~init_param->proc~map_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/map_read.html"},{"title":"solution_read – ALPS","text":"private  subroutine solution_read(ik) Uses alps_var proc~~solution_read~~UsesGraph proc~solution_read alps_io::solution_read module~alps_var alps_var proc~solution_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Reads in initial guesses for dispersion solutions. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ik Solution index. Called by proc~~solution_read~~CalledByGraph proc~solution_read alps_io::solution_read proc~init_param alps_io::init_param proc~init_param->proc~solution_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/solution_read.html"},{"title":"spec_read – ALPS","text":"private  subroutine spec_read(is) Uses alps_var proc~~spec_read~~UsesGraph proc~spec_read alps_io::spec_read module~alps_var alps_var proc~spec_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in species parameters Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. Called by proc~~spec_read~~CalledByGraph proc~spec_read alps_io::spec_read proc~init_param alps_io::init_param proc~init_param->proc~spec_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/spec_read.html"},{"title":"bM_read – ALPS","text":"private  subroutine bM_read(is) Uses alps_var proc~~bm_read~~UsesGraph proc~bm_read alps_io::bM_read module~alps_var alps_var proc~bm_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Reads in bi-Maxwellian parameters. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. Called by proc~~bm_read~~CalledByGraph proc~bm_read alps_io::bM_read proc~init_param alps_io::init_param proc~init_param->proc~bm_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/bm_read.html"},{"title":"scan_read – ALPS","text":"private  subroutine scan_read(is) Uses alps_var proc~~scan_read~~UsesGraph proc~scan_read alps_io::scan_read module~alps_var alps_var proc~scan_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. The most important subroutine.\nReads in wavevector scan parameters.\nDefines scanner , which controls the\nbehavior of the wavevector scan. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Scan index. Called by proc~~scan_read~~CalledByGraph proc~scan_read alps_io::scan_read proc~init_param alps_io::init_param proc~init_param->proc~scan_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/scan_read.html"},{"title":"fit_read – ALPS","text":"public  subroutine fit_read(is, ifit) Uses alps_var proc~~fit_read~~UsesGraph proc~fit_read alps_io::fit_read module~alps_var alps_var proc~fit_read->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Reads in fit parameters for component is. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. integer, intent(in) :: ifit Called by proc~~fit_read~~CalledByGraph proc~fit_read alps_io::fit_read proc~init_param alps_io::init_param proc~init_param->proc~fit_read program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/fit_read.html"},{"title":"get_runname – ALPS","text":"private  subroutine get_runname(runname, foldername) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O. character(len=500), intent(out) :: foldername Directory in which input file is stored. Called by proc~~get_runname~~CalledByGraph proc~get_runname alps_io::get_runname proc~alps_error_init alps_io::alps_error_init proc~alps_error_init->proc~get_runname program~alps alps program~alps->proc~alps_error_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_runname.html"},{"title":"read_f0 – ALPS","text":"public  subroutine read_f0() Uses alps_var proc~~read_f0~~UsesGraph proc~read_f0 alps_io::read_f0 module~alps_var alps_var proc~read_f0->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Subroutine for reading in background distribution function Arguments None Calls proc~~read_f0~~CallsGraph proc~read_f0 alps_io::read_f0 proc~get_unused_unit alps_io::get_unused_unit proc~read_f0->proc~get_unused_unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_f0~~CalledByGraph proc~read_f0 alps_io::read_f0 program~alps alps program~alps->proc~read_f0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/read_f0.html"},{"title":"get_indexed_namelist_unit – ALPS","text":"private  subroutine get_indexed_namelist_unit(unit, nml, index_in) Uses alps_var proc~~get_indexed_namelist_unit~~UsesGraph proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit module~alps_var alps_var proc~get_indexed_namelist_unit->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Determines unused I/O unit. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: index_in Index of namelist to be read in. Calls proc~~get_indexed_namelist_unit~~CallsGraph proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~alps_error alps_io::alps_error proc~get_indexed_namelist_unit->proc~alps_error proc~get_unused_unit alps_io::get_unused_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~input_unit alps_io::input_unit proc~get_indexed_namelist_unit->proc~input_unit proc~input_unit_exist alps_io::input_unit_exist proc~get_indexed_namelist_unit->proc~input_unit_exist mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~get_indexed_namelist_unit~~CalledByGraph proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~init_param alps_io::init_param proc~init_param->proc~get_indexed_namelist_unit program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_indexed_namelist_unit.html"},{"title":"get_indexed_double_namelist_unit – ALPS","text":"public  subroutine get_indexed_double_namelist_unit(unit, nml, spec_in, index_in) Uses alps_var proc~~get_indexed_double_namelist_unit~~UsesGraph proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit module~alps_var alps_var proc~get_indexed_double_namelist_unit->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. A version of get_indexed_namelist_unit , extended\nto allow for double indexing in order to read in multiple fits\nfor a single species. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: spec_in First index of namelist to be read in. integer, intent(in) :: index_in Second index of namelist to be read in. Calls proc~~get_indexed_double_namelist_unit~~CallsGraph proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~alps_error alps_io::alps_error proc~get_indexed_double_namelist_unit->proc~alps_error proc~get_unused_unit alps_io::get_unused_unit proc~get_indexed_double_namelist_unit->proc~get_unused_unit proc~input_unit alps_io::input_unit proc~get_indexed_double_namelist_unit->proc~input_unit proc~input_unit_exist alps_io::input_unit_exist proc~get_indexed_double_namelist_unit->proc~input_unit_exist mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~get_indexed_double_namelist_unit~~CalledByGraph proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~init_param alps_io::init_param proc~init_param->proc~get_indexed_double_namelist_unit program~alps alps program~alps->proc~init_param Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_indexed_double_namelist_unit.html"},{"title":"get_unused_unit – ALPS","text":"public  subroutine get_unused_unit(unit) Determine unused number for I/O index. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be assigned. Called by proc~~get_unused_unit~~CalledByGraph proc~get_unused_unit alps_io::get_unused_unit proc~alps_error_init alps_io::alps_error_init proc~alps_error_init->proc~get_unused_unit proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->proc~get_unused_unit proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0->proc~derivative_f0_rel proc~derivative_f0_rel->proc~get_unused_unit proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->proc~get_unused_unit proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~get_unused_unit proc~init_param alps_io::init_param proc~init_param->proc~get_unused_unit proc~init_param->proc~get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_namelist_unit proc~map_search alps_fns::map_search proc~map_search->proc~get_unused_unit proc~refine_guess alps_fns::refine_guess proc~map_search->proc~refine_guess proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~get_unused_unit proc~om_scan alps_fns::om_scan proc~om_scan->proc~get_unused_unit proc~read_f0 alps_io::read_f0 proc~read_f0->proc~get_unused_unit proc~refine_guess->proc~get_unused_unit program~alps alps program~alps->proc~alps_error_init program~alps->proc~derivative_f0 program~alps->proc~init_param program~alps->proc~map_search program~alps->proc~om_double_scan program~alps->proc~om_scan program~alps->proc~read_f0 program~alps->proc~refine_guess Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_unused_unit.html"},{"title":"alps_error_init – ALPS","text":"public  subroutine alps_error_init() Uses alps_var proc~~alps_error_init~~UsesGraph proc~alps_error_init alps_io::alps_error_init module~alps_var alps_var proc~alps_error_init->module~alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Open a file for the error log. Arguments None Calls proc~~alps_error_init~~CallsGraph proc~alps_error_init alps_io::alps_error_init proc~get_runname alps_io::get_runname proc~alps_error_init->proc~get_runname proc~get_unused_unit alps_io::get_unused_unit proc~alps_error_init->proc~get_unused_unit Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~alps_error_init~~CalledByGraph proc~alps_error_init alps_io::alps_error_init program~alps alps program~alps->proc~alps_error_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/alps_error_init.html"},{"title":"alps_error – ALPS","text":"public  subroutine alps_error(error_id) Uses mpi alps_var proc~~alps_error~~UsesGraph proc~alps_error alps_io::alps_error module~alps_var alps_var proc~alps_error->module~alps_var mpi mpi proc~alps_error->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Error catching subroutine. Arguments Type Intent Optional Attributes Name integer :: error_id Index of error message. Calls proc~~alps_error~~CallsGraph proc~alps_error alps_io::alps_error mpi_abort mpi_abort proc~alps_error->mpi_abort proc~output_time alps_io::output_time proc~alps_error->proc~output_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~alps_error~~CalledByGraph proc~alps_error alps_io::alps_error proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->proc~alps_error proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~alps_error proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~alps_error proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->proc~alps_error proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->proc~alps_error proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan alps_fns::om_scan proc~om_scan->proc~alps_error proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~output_fit alps_analyt::output_fit proc~output_fit->proc~alps_error program~alps alps program~alps->proc~alps_error program~alps->proc~om_double_scan program~alps->proc~om_scan proc~determine_param_fit alps_analyt::determine_param_fit program~alps->proc~determine_param_fit proc~init_param alps_io::init_param program~alps->proc~init_param proc~map_search alps_fns::map_search program~alps->proc~map_search proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~determine_param_fit->proc~lm_nonlinear_fit proc~determine_param_fit->proc~output_fit proc~init_param->proc~get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_namelist_unit proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp->proc~full_integrate proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/alps_error.html"},{"title":"output_time – ALPS","text":"public  subroutine output_time() Outputs the date and time in a given format using intrinsic\nFORTRAN function. Arguments None Called by proc~~output_time~~CalledByGraph proc~output_time alps_io::output_time proc~alps_error alps_io::alps_error proc~alps_error->proc~output_time program~alps alps program~alps->proc~output_time program~alps->proc~alps_error proc~om_double_scan alps_fns::om_double_scan program~alps->proc~om_double_scan proc~om_scan alps_fns::om_scan program~alps->proc~om_scan proc~determine_param_fit alps_analyt::determine_param_fit program~alps->proc~determine_param_fit proc~init_param alps_io::init_param program~alps->proc~init_param proc~map_search alps_fns::map_search program~alps->proc~map_search proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->proc~alps_error proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->proc~alps_error proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->proc~alps_error proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->proc~alps_error proc~om_double_scan->proc~alps_error proc~disp alps_fns::disp proc~om_double_scan->proc~disp proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan->proc~alps_error proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~output_fit alps_analyt::output_fit proc~output_fit->proc~alps_error proc~determine_param_fit->proc~lm_nonlinear_fit proc~determine_param_fit->proc~output_fit proc~init_param->proc~get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_namelist_unit proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~integrate_res_rel proc~disp->proc~full_integrate proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/output_time.html"},{"title":"display_credits – ALPS","text":"public  subroutine display_credits() Writes the opening credits. Arguments None Called by proc~~display_credits~~CalledByGraph proc~display_credits alps_io::display_credits program~alps alps program~alps->proc~display_credits Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/display_credits.html"},{"title":"input_unit_exist – ALPS","text":"function input_unit_exist(nml, exist) This function checks whether a unit number exists. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist identifier. logical, intent(out) :: exist Flags whether input unit exists. Return Value integer Unit number. Contents","tags":"","loc":"proc/input_unit_exist~2.html"},{"title":"input_unit – ALPS","text":"function input_unit(nml) This function returns a unit number for a namelist. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist identifier. Return Value integer Unit number for namelist. Contents","tags":"","loc":"proc/input_unit~2.html"},{"title":"read_in_params – ALPS","text":"subroutine read_in_params() This subroutine reads in system parameters input file (namelist) as argument after executable: ./interpolate input.in Arguments None Calls proc~~read_in_params~~CallsGraph proc~read_in_params interpolate::read_in_params proc~get_runname~2 interpolate::get_runname proc~read_in_params->proc~get_runname~2 proc~get_unused_unit~2 interpolate::get_unused_unit proc~read_in_params->proc~get_unused_unit~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_in_params~~CalledByGraph proc~read_in_params interpolate::read_in_params program~interpolate interpolate program~interpolate->proc~read_in_params Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/read_in_params.html"},{"title":"get_unused_unit – ALPS","text":"subroutine get_unused_unit(unit) This subroutine returns an available unit number. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit number. Called by proc~~get_unused_unit~2~~CalledByGraph proc~get_unused_unit~2 interpolate::get_unused_unit proc~read_in_params interpolate::read_in_params proc~read_in_params->proc~get_unused_unit~2 program~interpolate interpolate program~interpolate->proc~read_in_params Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_unused_unit~2.html"},{"title":"get_runname – ALPS","text":"subroutine get_runname(runname, foldername) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O. character(len=500), intent(out) :: foldername Directory in which input file is stored. Called by proc~~get_runname~2~~CalledByGraph proc~get_runname~2 interpolate::get_runname proc~read_in_params interpolate::read_in_params proc~read_in_params->proc~get_runname~2 program~interpolate interpolate program~interpolate->proc~read_in_params Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_runname~2.html"},{"title":"input_unit_exist – ALPS","text":"function input_unit_exist(nml, exist) Determine if a particular namelist already opened. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist to be opened. logical, intent(out) :: exist Determination if namelist is open. Return Value integer I/O dummy index. Called by proc~~input_unit_exist~3~~CalledByGraph proc~input_unit_exist~3 generate_distribution::input_unit_exist proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~get_indexed_namelist_unit~2->proc~input_unit_exist~3 proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~get_indexed_namelist_unit~2 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/input_unit_exist~3.html"},{"title":"input_unit – ALPS","text":"function input_unit(nml) Assigns input unit for namelist opening. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist string. Return Value integer I/O dummy index. Called by proc~~input_unit~3~~CalledByGraph proc~input_unit~3 generate_distribution::input_unit proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~get_indexed_namelist_unit~2->proc~input_unit~3 proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~get_indexed_namelist_unit~2 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/input_unit~3.html"},{"title":"read_in_params – ALPS","text":"subroutine read_in_params() This subroutine reads in the parameters for the generation of distribution functions for ALPS. Arguments None Calls proc~~read_in_params~2~~CallsGraph proc~read_in_params~2 generate_distribution::read_in_params proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~read_in_params~2->proc~get_indexed_namelist_unit~2 proc~get_runname~3 generate_distribution::get_runname proc~read_in_params~2->proc~get_runname~3 proc~get_unused_unit~3 generate_distribution::get_unused_unit proc~read_in_params~2->proc~get_unused_unit~3 proc~spec_read~2 generate_distribution::spec_read proc~read_in_params~2->proc~spec_read~2 proc~get_indexed_namelist_unit~2->proc~get_unused_unit~3 proc~input_unit_exist~3 generate_distribution::input_unit_exist proc~get_indexed_namelist_unit~2->proc~input_unit_exist~3 proc~input_unit~3 generate_distribution::input_unit proc~get_indexed_namelist_unit~2->proc~input_unit~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~read_in_params~2~~CalledByGraph proc~read_in_params~2 generate_distribution::read_in_params program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/read_in_params~2.html"},{"title":"spec_read – ALPS","text":"subroutine spec_read(is) Subroutine for reading in species parameters. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. Called by proc~~spec_read~2~~CalledByGraph proc~spec_read~2 generate_distribution::spec_read proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~spec_read~2 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/spec_read~2.html"},{"title":"get_indexed_namelist_unit – ALPS","text":"subroutine get_indexed_namelist_unit(unit, nml, index_in) Determines unused I/O unit. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: index_in Index of namelist to be read in. Calls proc~~get_indexed_namelist_unit~2~~CallsGraph proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~get_unused_unit~3 generate_distribution::get_unused_unit proc~get_indexed_namelist_unit~2->proc~get_unused_unit~3 proc~input_unit_exist~3 generate_distribution::input_unit_exist proc~get_indexed_namelist_unit~2->proc~input_unit_exist~3 proc~input_unit~3 generate_distribution::input_unit proc~get_indexed_namelist_unit~2->proc~input_unit~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~get_indexed_namelist_unit~2~~CalledByGraph proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~get_indexed_namelist_unit~2 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_indexed_namelist_unit~2.html"},{"title":"get_unused_unit – ALPS","text":"subroutine get_unused_unit(unit) Determine unused number for I/O index. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be assigned. Called by proc~~get_unused_unit~3~~CalledByGraph proc~get_unused_unit~3 generate_distribution::get_unused_unit proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~get_indexed_namelist_unit~2->proc~get_unused_unit~3 proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~get_unused_unit~3 proc~read_in_params~2->proc~get_indexed_namelist_unit~2 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_unused_unit~3.html"},{"title":"get_runname – ALPS","text":"subroutine get_runname(runname) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O. Called by proc~~get_runname~3~~CalledByGraph proc~get_runname~3 generate_distribution::get_runname proc~read_in_params~2 generate_distribution::read_in_params proc~read_in_params~2->proc~get_runname~3 program~generate_distribution generate_distribution program~generate_distribution->proc~read_in_params~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/get_runname~3.html"},{"title":"distribution_analyt – ALPS","text":"public  function distribution_analyt(is, pperp, ppar) This function returns the pre-defined function as f0. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species. double precision :: pperp Perpendicular momentum. double complex :: ppar Parallel momentum. Return Value doublecomplex Called by proc~~distribution_analyt~~CalledByGraph proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit alps_analyt::eval_fit proc~eval_fit->proc~distribution_analyt program~generate_distribution generate_distribution program~generate_distribution->proc~distribution_analyt proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->proc~eval_fit proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->proc~eval_fit proc~output_fit alps_analyt::output_fit proc~output_fit->proc~eval_fit proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->proc~output_fit proc~full_integrate alps_fns::full_integrate proc~full_integrate->proc~landau_integrate proc~full_integrate->proc~landau_integrate_rel proc~disp alps_fns::disp proc~disp->proc~full_integrate program~alps alps program~alps->proc~determine_param_fit proc~map_search alps_fns::map_search program~alps->proc~map_search proc~om_double_scan alps_fns::om_double_scan program~alps->proc~om_double_scan proc~om_scan alps_fns::om_scan program~alps->proc~om_scan proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->proc~disp proc~map_search->proc~disp proc~map_search->proc~refine_guess proc~om_double_scan->proc~disp proc~om_double_scan->proc~calc_eigen proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan->proc~disp proc~om_scan->proc~calc_eigen proc~om_scan->proc~secant proc~refine_guess->proc~disp proc~refine_guess->proc~secant proc~secant->proc~disp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents","tags":"","loc":"proc/distribution_analyt.html"},{"title":"alps_fns – ALPS","text":"This module contains the key numerical functions of ALPS. Used by module~~alps_fns~~UsedByGraph module~alps_fns alps_fns program~alps alps program~alps->module~alps_fns Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions disp full_integrate integrate integrate_res funct_g landau_integrate int_ee resU int_T int_T_res Subroutines derivative_f0 determine_resonances secant om_scan calc_eigen om_double_scan map_search refine_guess find_minima determine_nmax split_processes determine_bessel_array Functions public  function disp (om) This function returns the determinant of the dispersion tensor for a given frequency om. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex public  function full_integrate (om, nn, mode, found_res) This function returns the full integral expression according to Eq. (2.9) in the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). logical, intent(in) :: found_res Check whether a resonance is found. Return Value doublecomplex private  function integrate (om, nn, mode, iparmin, iparmax) This function performs the integral in Eq. (2.9) of the code paper, but without\naccounting for the Landau contour integral. It is called by full_integrate . Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer :: iparmin Minimum limit index of parallel momentum for integration. integer :: iparmax Maximum limit index of parallel momentum for integration. Return Value doublecomplex private  function integrate_res (om, nn, mode) This function performs the integration near resonances as described in Section 3.1 of the code paper. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex public  function funct_g (ppar_real, iperp, om, nn, mode) This function returns the function from Eq. (3.2) of the code paper. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: ppar_real Real part of the momentum at which is evaluated. integer, intent(in) :: iperp Index of the perpendicular momentum. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex private  function landau_integrate (om, nn, mode) This function evaluates the Landau contour according to Eqs. (3.8) and (3.9) of the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex public  function int_ee (om) This function returns the ee term in Eq. (2.9). Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex private  function resU (om, nn, iperp, ipar) This function evaluates the term proportional to in Eq. (2.9) of the code paper. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. integer, intent(in) :: ipar Index to loop over parallel momentum. Return Value doublecomplex private  function int_T (nn, iperp, ipar, mode) This function returns the T-tensor according to Eq. (2.10) of the code paper. Arguments Type Intent Optional Attributes Name integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. integer, intent(in) :: ipar Index to loop over parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex private  function int_T_res (nn, iperp, p_res, mode) This function returns the T-tensor according to Eq. (2.10) of the code paper for the case in which it is evaluated at the complex resonance momentum. Arguments Type Intent Optional Attributes Name integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: iperp Index to loop over perpendicular momentum. double complex, intent(in) :: p_res Complex resonance momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex Subroutines public  subroutine derivative_f0 () This subroutine calculates the perpendicular and parallel derivatives of the background velocity distribution function f0. Arguments None public  subroutine determine_resonances (om, nn, found_res_plus, found_res_minus) This subroutine determines whether any kinetic resonances are located in the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of Bessel function. logical, intent(out) :: found_res_plus Check whether a resonance is found at positive n. logical, intent(out) :: found_res_minus Check whether a resonance is found at negative n. public  subroutine secant (om) This subroutine applies the secant method to find the roots of the dispersion tensor. Arguments Type Intent Optional Attributes Name double complex, intent(inout) :: om Complex wave frequency . public  subroutine om_scan (ik) This subroutine scans solutions along a single prescribed path in wavevector space. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ik Index of scan number. public  subroutine calc_eigen (omega, electric, magnetic, vmean, ds, Ps, eigen_L, heat_L) This subroutine calculates the relative electric and magnetic field amplitudes, the relative fluctuations in the density and velocity of all species, and the heating rates of the given solution.\nIt is based on the calc_eigen routine by Greg Howes and Kris Klein. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: omega Complex wave frequency . double complex, intent(out), dimension(1:3) :: electric Relative electric field amplitude (eigenfunction). double complex, intent(out), dimension(1:3) :: magnetic Relative magnetic field amplitude (eigenfunction). double complex, intent(out), dimension(1:3,1:nspec) :: vmean Relative velocity-fluctuation amplitude (eigenfunction). double complex, intent(out), dimension(1:nspec) :: ds Relative density-fluctuation amplitude (eigenfunction). double precision, intent(out), dimension(1:nspec) :: Ps Relative heating rate of a given species. logical, intent(in) :: eigen_L Check whether eigenfunction calculation is requested. logical, intent(in) :: heat_L Check whether eigenfunction calculation is requested. public  subroutine om_double_scan () This subroutine scans along a prescribed plane in wavevector space to map out in this space. It is required that n_scan=2. Arguments None public  subroutine map_search () This subroutine calculates the map of the determinant of the dispersion tensor in complex frequency space. Arguments None public  subroutine refine_guess () This subroutine refines the guess at the starting point of the search for solutions to the dispersion relation when scanning. It is also used by map_search to identify the roots on the map. Arguments None public  subroutine find_minima (val, numroots, iroots, nroots) This subroutine identifies the minima of the coarse map grid. It is called by map_search .\nThe code is based on a routine by Greg Howes, 2006. Arguments Type Intent Optional Attributes Name double precision, intent(in), dimension(:,:), pointer :: val Array of determinant of the dispersion tensor. integer, intent(in) :: numroots Number of roots. integer, intent(out), dimension(1:2,1:numroots) :: iroots Indices of roots. integer, intent(out) :: nroots Number of roots found. public  subroutine determine_nmax () This subroutine determines the maximum required order of the Bessel functions in Eq. (2.9) of the code paper. Arguments None public  subroutine split_processes () This subroutine defines the tasks for the individual processes. It uses the number of species and the required orders of the Bessel functions to define the splitting across the MPI processes. Arguments None public  subroutine determine_bessel_array () This subroutine determines the array of Bessel functions that is used in the T-tensor of Eq. (2.10) of the code paper. Arguments None","tags":"","loc":"module/alps_fns.html"},{"title":"alps_com – ALPS","text":"Used by module~~alps_com~~UsedByGraph module~alps_com alps_com program~alps alps program~alps->module~alps_com Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Subroutines pass_instructions pass_distribution Subroutines public  subroutine pass_instructions () Passes information between processes. Arguments None public  subroutine pass_distribution () Passes distribution functions and associated parameters. Arguments None","tags":"","loc":"module/alps_com.html"},{"title":"alps_nhds – ALPS","text":"Module including the NHDS implementation for bi-Maxwellian reference cases.\nThe original NHDS code can be found under github.com/danielver02/NHDS. Used by module~~alps_nhds~~UsedByGraph module~alps_nhds alps_nhds proc~disp alps_fns::disp proc~disp->module~alps_nhds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions besselI dispfunct BESSI BESSI0 BESSI1 Subroutines calc_chi calc_ypsilon WOFZ Functions private  function besselI (n, x) Calculates the modified Bessel function of argument x and order n. Arguments Type Intent Optional Attributes Name integer, intent(in) :: n Order of the modified Bessel function. double precision, intent(in) :: x Argument of the modified Bessel function. Return Value doubleprecision private  function dispfunct (zeta, kpos) Calculates the dispersion function based on the complex error function. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: zeta Argument of dispersion function. logical, intent(in) :: kpos Check whether kpar is positive. Return Value doublecomplex private  function BESSI (N, X) Function to calculate the first kind modified Bessel function of integer order N\nfor any real X. Arguments Type Intent Optional Attributes Name integer :: N real(kind=8) :: X Return Value doubleprecision private  function BESSI0 (X) Auxiliary Bessel functions for N=0, N=1 Arguments Type Intent Optional Attributes Name real(kind=8) :: X Return Value doubleprecision private  function BESSI1 (X) Modified Bessel function of order 1. Arguments Type Intent Optional Attributes Name real(kind=8) :: X Return Value doubleprecision Subroutines public  subroutine calc_chi (chi, j, kz, kperp, x) Subroutine that calculates the susceptibility of species j based on NHDS. Arguments Type Intent Optional Attributes Name double complex, intent(out) :: chi (3,3) Susceptibility tensor of species j. integer, intent(in) :: j Index for species. double precision, intent(in) :: kz Normalised parallel wavenumber. double precision, intent(in) :: kperp Normalised perpendicular wavenumber. double complex, intent(in) :: x Normalised complex frequency. private  subroutine calc_ypsilon (Y, j, n, kz, kperp, x) Calculates the Y-tensor according to Stix for a bi-Maxwelling, using the NHDS calculation. Arguments Type Intent Optional Attributes Name double complex, intent(out) :: Y (3,3) integer, intent(in) :: j Index for species. integer, intent(in) :: n Index of sum over Bessel functions. double precision, intent(in) :: kz Normalised parallel wavenumber. double precision, intent(in) :: kperp Normalised perpendicular wavenumber. double complex, intent(in) :: x Normalised complex frequency. private  subroutine WOFZ (XI, YI, U, V, FLAG) Given a complex number Z = (XI,YI), this subroutine computes\n the value of the Faddeeva function W(Z) = exp(-Z 2) erfc(-I Z),\n where erfc is the complex complementary error function and I\nis the imaginary unit. Arguments Type Intent Optional Attributes Name real :: XI real :: YI real :: U real :: V logical :: FLAG","tags":"","loc":"module/alps_nhds.html"},{"title":"alps_analyt – ALPS","text":"This module contains functions and subroutines for the hybrid analytical continuation. Used by module~~alps_analyt~~UsedByGraph module~alps_analyt alps_analyt proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->module~alps_analyt proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->module~alps_analyt program~alps alps program~alps->module~alps_analyt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions eval_fit fit_function Subroutines determine_param_fit output_fit determine_JT LM_nonlinear_fit Functions public  function eval_fit (is, iperp, ppar_valC) This function evaluates the fit to f0 at and the complex parallel\nmomentum ppar_valC. It requires the fit parameters that will be determined\nby the subroutine determine_param_fit . Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which eval_fit is executed. integer, intent(in) :: iperp Index of perpendicular momentum at which eval_fit is executed. double complex, intent(in) :: ppar_valC Complex parallel momentum at which eval_fit is executed. Return Value doublecomplex private  function fit_function (is, n_params, params, pperp_val, ppar_val) This function evaluates the fit to f0 at real pperp_val and complex ppar_val,\nprovided that the one-dimensional fit-parameter array params is fed into the\nfunction. This is only used during the fitting. For the evaluation in ALPS,\nuse eval_fit . Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which eval_fit is executed. integer, intent(in) :: n_params Total number of fit parameters for a given species. double precision, intent(in) :: params (n_params) Array of fit parameters. double precision, intent(in) :: pperp_val Perpendicular momentum. double complex, intent(in) :: ppar_val Complex parallel momentum. Return Value doublecomplex Subroutines public  subroutine determine_param_fit () This is the fitting routine for the hybrid analytic continuation. It determines\nthe full field param_fit . Arguments None private  subroutine output_fit (qualitytotal) This subroutine outputs the fit parameters for iperp=0 to stdout to monitor the fit. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: qualitytotal Quality of the total fit result. private  subroutine determine_JT (is, n_params, nJT, JT, params, iperp, upper_limit, ipparbar_lower) This subroutine calculates the transposed Jacobian matrix of the fit function with respect to the\nfit parameter array. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which determine_JT is executed. integer, intent(in) :: n_params Total number of fit parameters for a given species. integer, intent(in) :: nJT First dimension of matrix JT. double precision, intent(out) :: JT (nJT,0:upper_limit) Transposed Jacobian matrix of the fit function. double precision, intent(in) :: params (n_params) Array of fit parameters. integer, intent(in) :: iperp Index of perpendicular momentum at which JT is evaluated. integer, intent(in) :: upper_limit Upper limit of iperp space (relativistic and non-relativistic). integer, intent(in) :: ipparbar_lower Lower index of parallel momentum (relativistic). private  subroutine LM_nonlinear_fit (is, g, n_params, nJT, params, param_mask, iperp, npar, ipparbar_lower, quality) This subroutine processes the nonlinear Levenberg-Marquart algorithm and returns\nthe one-dimensional array params at a given iperp.\nThe variable quality is the sum of the squares of all residuals. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species for which LM_nonlinear_fit is executed. double precision, intent(in) :: g (0:npar) Array of function to be fitted. integer, intent(in) :: n_params Total number of fit parameters for a given species. integer, intent(in) :: nJT First dimension of matrix JT (see determine_JT ). double precision, intent(inout) :: params (n_params) Array of fit parameters. logical, intent(in) :: param_mask (n_params) Bit mask for required fit parameters. integer, intent(in) :: iperp Index of perpendicular momentum. integer, intent(in) :: npar Number of steps in parallel momentum integer, intent(in) :: ipparbar_lower Lower index of parallel momentum (relativistic). double precision, intent(out) :: quality Quality of the individual fit result.","tags":"","loc":"module/alps_analyt.html"},{"title":"alps_fns_rel – ALPS","text":"This module contains the relativistic numerical functions of ALPS. Used by module~~alps_fns_rel~~UsedByGraph module~alps_fns_rel alps_fns_rel proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->module~alps_fns_rel proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->module~alps_fns_rel proc~determine_nmax alps_fns::determine_nmax proc~determine_nmax->module~alps_fns_rel proc~disp alps_fns::disp proc~disp->module~alps_fns_rel proc~full_integrate alps_fns::full_integrate proc~full_integrate->module~alps_fns_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions integrate_res_rel integrate_resU_rel principal_integral_rel funct_g_rel landau_integrate_rel int_ee_rel resU_rel int_T_rel int_T_res_rel Fact BESSJ BESSJ0 BESSJ1 Gamma Subroutines derivative_f0_rel polyharmonic_spline determine_sproc_rel CBESSJ Functions public  function integrate_res_rel (om, nn, mode) This function performs the integration near resonances as described in Section 3.1 of the code paper for a relativistic calculation. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex private  function integrate_resU_rel (sproc_rel, om, nn, mode, igamma) This function evaluates the integral with the integrand proportional to in Eq. (2.9) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer, intent(in) :: igamma Index to loop over . Return Value doublecomplex public  function principal_integral_rel (sproc_rel, om, nn, mode, igamma, ipparbar_res, upperlimit) This function performs the integration near resonances as described in Section 3.1 of the code paper for a relativistic calculation. It is only called if resonances are present in or near the integration domain. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar_res Index of the nearest relativistic parallel momentum to the resonance. integer, intent(in) :: upperlimit Index of upper limit for integration according to Eq. (3.5). Return Value doublecomplex private  function funct_g_rel (sproc_rel, pparbar, igamma, om, nn, mode) This function returns the function from Eq. (3.2) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double precision, intent(in) :: pparbar Relativistic parallel momentum. integer, intent(in) :: igamma Index of . double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex public  function landau_integrate_rel (om, nn, mode) This function evaluates the Landau contour according to Eqs. (3.8) and (3.9) of the code paper for a relativistic calculation. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex public  function int_ee_rel (om) This function returns the ee term in Eq. (2.9) for the relativistic calculation. Arguments Type Intent Optional Attributes Name double complex, intent(in) :: om Complex wave frequency . Return Value doublecomplex public  function resU_rel (sproc_rel, om, nn, igamma, ipparbar) This function evaluates the term proportional to in Eq. (2.9) of the code paper for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. double complex, intent(in) :: om Complex wave frequency . integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar Index to loop over relativistic parallel momentum. Return Value doublecomplex private  function int_T_rel (sproc_rel, nn, igamma, ipparbar, mode) This function returns the T-tensor according to Eq. (2.10) of the code paper for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . integer, intent(in) :: ipparbar Index to loop over relativistic parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex private  function int_T_res_rel (sproc_rel, nn, igamma, pparbar, mode) This function returns the T-tensor according to Eq. (2.10) of the code paper for the case in which it is evaluated at the complex resonance momentum for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: sproc_rel is_rel of the current process. integer, intent(in) :: nn Order of the Bessel function. integer, intent(in) :: igamma Index to loop over . double complex, intent(in) :: pparbar Relativistic parallel momentum. integer, intent(in) :: mode Index of the entries in the T-tensor of Eq. (2.10). Return Value doublecomplex private  function Fact (k) This function returns the factorial k! of its argument k. Arguments Type Intent Optional Attributes Name integer, intent(in) :: k Argument of the factorial. Return Value doubleprecision public  function BESSJ (N, X) This function calculates the first kind Bessel function\nof integer order N, for any REAL X. We use here the classical\nrecursion formula, when X > N. For X < N, Miller's algorithm\nis used to avoid overflows. Reference:\nC.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name integer, intent(in) :: N Order of Bessel function. double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision public  function BESSJ0 (X) This function calculates the first kind Bessel function\nof order 0, for any REAL X. The polynomial approximation by\nseries of Chebyshev polynomials is used for 0<X<8 and 0<8/X<1. References:\nM.Abramowitz, I.A.Stegun, Handbook of Mathematical Functions, 1965. C.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision public  function BESSJ1 (X) This subroutine calculates the First Kind Bessel Function of\norder 1, for any real number X. The polynomial approximation by\nseries of Chebyshev polynomials is used for 0<X<8 and 0<8/X<1. References:\nM.Abramowitz, I.A.Stegun, Handbook of Mathematical Functions, 1965. C.W.Clenshaw, Chebyshev Series for Mathematical Functions, Mathematical Tables, Vol. 5, 1962. Arguments Type Intent Optional Attributes Name double precision, intent(in) :: X Argument of the Bessel function. Return Value doubleprecision public  function Gamma (xx) This function returns the Gamma-function. Arguments Type Intent Optional Attributes Name double precision :: xx Argument of the Gamma-function. Return Value doubleprecision Subroutines public  subroutine derivative_f0_rel (is, is_rel) This subroutine calculates the derivatives of the background velocity distribution function f0 for the relativistic calculation. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of particle species. integer, intent(in) :: is_rel Index for relativistic species (if any). public  subroutine polyharmonic_spline (grid_coarse, gamma_coarse, pparbar_coarse, n_coarse, gamma_rel, pparbar, ngamma, npparbar, smoothing, f0_rel, is_rel, nspec_rel) This soubroutine interpolates the grid with a polyharmonic thin-plate spline.\nThis subroutine needs the LUPACK and BLAS libraries to evoke the dgesv subroutine.\nThe method uses the Thin Plate Spline.\nWe use these resources: http://cseweb.ucsd.edu/~sjb/eccv_tps.pdf http://www.univie.ac.at/nuhag-php/bibtex/open_files/po94_M%20J%20D%20Powell%2003%2093.pdf http://vision.ucsd.edu/sites/default/files/fulltext(4).pdf Arguments Type Intent Optional Attributes Name double precision, intent(in) :: grid_coarse (n_coarse) Coarse input grid for interpolation. double precision, intent(in) :: gamma_coarse (n_coarse) Coordinates of on coarse grid. double precision, intent(in) :: pparbar_coarse (n_coarse) Coordinates of relativistic parallel momentum on coarse grid. integer, intent(in) :: n_coarse Number of entries in coarse grid. double precision, intent(in) :: gamma_rel (nspec_rel,0:ngamma,0:npparbar) Coordinates of on fine grid. double precision, intent(in) :: pparbar (nspec_rel,0:ngamma,0:npparbar) Coordinates of relativistic parallel momentum on fine grid. integer, intent(in) :: ngamma Number of steps on fine output grid. integer, intent(in) :: npparbar Number of parallel momentum steps on fine output grid. double precision, intent(in) :: smoothing Smoothing parameter for spline interpolation. double precision, intent(out) :: f0_rel (nspec_rel,0:ngamma,0:npparbar) Fine output grid after interpolation. integer :: is_rel Index for relativistic species (if any). integer :: nspec_rel Number of relativistic species. private  subroutine determine_sproc_rel (sproc_rel) This subroutine determines sproc_rel for the given process. Arguments Type Intent Optional Attributes Name integer, intent(out) :: sproc_rel is_rel of the current process. public  subroutine CBESSJ (z, nu, z1) This subroutine calculates the complex Bessel function. It is based on the CBESSJ function release 1.1 by J-P Moreau, Paris (www.jpmoreau.fr). Arguments Type Intent Optional Attributes Name double complex, intent(in) :: z Argument of the Bessel function. integer, intent(in) :: nu Order of Bessel function. double complex, intent(out) :: z1 Resulting value of Bessel function.","tags":"","loc":"module/alps_fns_rel.html"},{"title":"alps_io – ALPS","text":"Controls input and output functions to and from main program. Used by module~~alps_io~~UsedByGraph module~alps_io alps_io proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->module~alps_io proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0_rel->module~alps_io proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->module~alps_io proc~determine_resonances alps_fns::determine_resonances proc~determine_resonances->module~alps_io proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->module~alps_io proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->module~alps_io proc~map_search alps_fns::map_search proc~map_search->module~alps_io proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->module~alps_io proc~om_scan alps_fns::om_scan proc~om_scan->module~alps_io proc~output_fit alps_analyt::output_fit proc~output_fit->module~alps_io proc~refine_guess alps_fns::refine_guess proc~refine_guess->module~alps_io program~alps alps program~alps->module~alps_io Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables unit stdout_unit input_unit_no error_unit_no Functions input_unit_exist input_unit isnancheck Subroutines init_param map_read solution_read spec_read bM_read scan_read fit_read get_runname read_f0 get_indexed_namelist_unit get_indexed_double_namelist_unit get_unused_unit alps_error_init alps_error output_time display_credits Variables Type Visibility Attributes Name Initial integer, public :: unit Index for file I/O. integer, public, parameter :: stdout_unit = 6 Standard unit for I/O. integer, public, save :: input_unit_no Saved input unit for use with multiple read in calls. integer, public, save :: error_unit_no = stdout_unit Error output unit. Functions private  function input_unit_exist (nml, exist) Determine if a particular namelist already opened. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist to be opened. logical, intent(out) :: exist Determination if namelist is open. Return Value integer I/O dummy indices. private  function input_unit (nml) Assigns input unit for namelist opening. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist string. Return Value integer I/O dummy indices. public  function isnancheck (input) Checks if double precision number input is NaN. Arguments Type Intent Optional Attributes Name double precision :: input Variable to be checked. Return Value logical Subroutines public  subroutine init_param () Read in system parameters from *.in file.\nOnly processor 0 calls this routine: Arguments None private  subroutine map_read () Reads in complex frequency map parameters. Arguments None private  subroutine solution_read (ik) Reads in initial guesses for dispersion solutions. Arguments Type Intent Optional Attributes Name integer, intent(in) :: ik Solution index. private  subroutine spec_read (is) Subroutine for reading in species parameters Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. private  subroutine bM_read (is) Reads in bi-Maxwellian parameters. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. private  subroutine scan_read (is) The most important subroutine.\nReads in wavevector scan parameters.\nDefines scanner , which controls the\nbehavior of the wavevector scan. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Scan index. public  subroutine fit_read (is, ifit) Reads in fit parameters for component is. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. integer, intent(in) :: ifit private  subroutine get_runname (runname, foldername) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O. character(len=500), intent(out) :: foldername Directory in which input file is stored. public  subroutine read_f0 () Subroutine for reading in background distribution function Arguments None private  subroutine get_indexed_namelist_unit (unit, nml, index_in) Determines unused I/O unit. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: index_in Index of namelist to be read in. public  subroutine get_indexed_double_namelist_unit (unit, nml, spec_in, index_in) A version of get_indexed_namelist_unit , extended\nto allow for double indexing in order to read in multiple fits\nfor a single species. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: spec_in First index of namelist to be read in. integer, intent(in) :: index_in Second index of namelist to be read in. public  subroutine get_unused_unit (unit) Determine unused number for I/O index. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be assigned. public  subroutine alps_error_init () Open a file for the error log. Arguments None public  subroutine alps_error (error_id) Error catching subroutine. Arguments Type Intent Optional Attributes Name integer :: error_id Index of error message. public  subroutine output_time () Outputs the date and time in a given format using intrinsic\nFORTRAN function. Arguments None public  subroutine display_credits () Writes the opening credits. Arguments None","tags":"","loc":"module/alps_io.html"},{"title":"alps_var – ALPS","text":"Contains all global variables. Uses mpi module~~alps_var~~UsesGraph module~alps_var alps_var mpi mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~alps_var~~UsedByGraph module~alps_var alps_var proc~alps_error alps_io::alps_error proc~alps_error->module~alps_var proc~alps_error_init alps_io::alps_error_init proc~alps_error_init->module~alps_var proc~bm_read alps_io::bM_read proc~bm_read->module~alps_var proc~calc_chi alps_nhds::calc_chi proc~calc_chi->module~alps_var proc~calc_eigen alps_fns::calc_eigen proc~calc_eigen->module~alps_var proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_ypsilon->module~alps_var proc~derivative_f0 alps_fns::derivative_f0 proc~derivative_f0->module~alps_var proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0_rel->module~alps_var proc~determine_bessel_array alps_fns::determine_bessel_array proc~determine_bessel_array->module~alps_var proc~determine_jt alps_analyt::determine_JT proc~determine_jt->module~alps_var proc~determine_nmax alps_fns::determine_nmax proc~determine_nmax->module~alps_var proc~determine_param_fit alps_analyt::determine_param_fit proc~determine_param_fit->module~alps_var proc~determine_resonances alps_fns::determine_resonances proc~determine_resonances->module~alps_var proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~determine_sproc_rel->module~alps_var proc~disp alps_fns::disp proc~disp->module~alps_var proc~eval_fit alps_analyt::eval_fit proc~eval_fit->module~alps_var proc~find_minima alps_fns::find_minima proc~find_minima->module~alps_var proc~fit_function alps_analyt::fit_function proc~fit_function->module~alps_var proc~fit_read alps_io::fit_read proc~fit_read->module~alps_var proc~full_integrate alps_fns::full_integrate proc~full_integrate->module~alps_var proc~funct_g alps_fns::funct_g proc~funct_g->module~alps_var proc~funct_g_rel alps_fns_rel::funct_g_rel proc~funct_g_rel->module~alps_var proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~get_indexed_double_namelist_unit->module~alps_var proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~get_indexed_namelist_unit->module~alps_var proc~init_param alps_io::init_param proc~init_param->module~alps_var proc~int_ee alps_fns::int_ee proc~int_ee->module~alps_var proc~int_ee_rel alps_fns_rel::int_ee_rel proc~int_ee_rel->module~alps_var proc~int_t alps_fns::int_T proc~int_t->module~alps_var proc~int_t_rel alps_fns_rel::int_T_rel proc~int_t_rel->module~alps_var proc~int_t_res alps_fns::int_T_res proc~int_t_res->module~alps_var proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~int_t_res_rel->module~alps_var proc~integrate alps_fns::integrate proc~integrate->module~alps_var proc~integrate_res alps_fns::integrate_res proc~integrate_res->module~alps_var proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~integrate_res_rel->module~alps_var proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_resu_rel->module~alps_var proc~landau_integrate alps_fns::landau_integrate proc~landau_integrate->module~alps_var proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~landau_integrate_rel->module~alps_var proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~lm_nonlinear_fit->module~alps_var proc~map_read alps_io::map_read proc~map_read->module~alps_var proc~map_search alps_fns::map_search proc~map_search->module~alps_var proc~om_double_scan alps_fns::om_double_scan proc~om_double_scan->module~alps_var proc~om_scan alps_fns::om_scan proc~om_scan->module~alps_var proc~output_fit alps_analyt::output_fit proc~output_fit->module~alps_var proc~pass_distribution alps_com::pass_distribution proc~pass_distribution->module~alps_var proc~pass_instructions alps_com::pass_instructions proc~pass_instructions->module~alps_var proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~principal_integral_rel->module~alps_var proc~read_f0 alps_io::read_f0 proc~read_f0->module~alps_var proc~refine_guess alps_fns::refine_guess proc~refine_guess->module~alps_var proc~resu alps_fns::resU proc~resu->module~alps_var proc~resu_rel alps_fns_rel::resU_rel proc~resu_rel->module~alps_var proc~scan_read alps_io::scan_read proc~scan_read->module~alps_var proc~secant alps_fns::secant proc~secant->module~alps_var proc~solution_read alps_io::solution_read proc~solution_read->module~alps_var proc~spec_read alps_io::spec_read proc~spec_read->module~alps_var proc~split_processes alps_fns::split_processes proc~split_processes->module~alps_var program~alps alps program~alps->module~alps_var Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Variables runname foldername nroots nroots_max use_map writeOut unit_error nproc iproc proc0 ierror kperp kpar vA Bessel_zero nspec nspec_rel wroots numroots omi omf gami gamf loggridw loggridg nr ni nperp npar ngamma npparbar positions_principal Tlim sproc numiter D_threshold D_prec D_gap pi arrayName f0 f0_rel df0 df0_rel pp current_int gamma_rel pparbar_rel nmax nlim ns qs ms relativistic wave chi0 bessel_array n_fits fit_type maxsteps_fit lambda_initial_fit lambdafac_fit epsilon_fit param_fit perp_correction fit_check determine_minima n_resonance_interval scan_option n_scan logfit usebM bMnmaxs bMBessel_zeros bMbetas bMalphas bMpdrifts scan kperp_last kpar_last kperp_0 kpar_0 Derived Types scanner Variables Type Visibility Attributes Name Initial character(len=500), public :: runname Root of input file name. character(len=500), public :: foldername Directory of input file name. integer, public :: nroots Number of dispersion solutions under consideration. integer, public :: nroots_max Number of dispersion solutions found in frequency map scan. logical, public :: use_map Choice of: (T) searching for roots over a map in complex frequency space,\n via map_read ; (F) input (nroots) guesses for solutions,\n via solution_read logical, public :: writeOut = .true. Write or suppress output to screen. integer, public :: unit_error Output unit for error file. integer, public :: nproc Total number of processors. integer, public :: iproc Number of local processor. logical, public :: proc0 T if iproc=0. integer, public :: ierror Integer error flag. double precision, public :: kperp Perpendicular wavenumber, normalized by\ninverse reference inertial length, . double precision, public :: kpar Parallel wavenumber, normalized by\ninverse reference inertial length, . double precision, public :: vA Alfven Velocity, normalized to speed of light, . double precision, public :: Bessel_zero = 1.d-45 Calculate Bessel functions until the maximum is less than this value. integer, public :: nspec Number of plasma components. integer, public :: nspec_rel Number of relativistic plasma components. double complex, public, dimension(:), allocatable :: wroots Dispersion solutions, ranging from 1 to numroots. integer, public :: numroots = 100 Maximum number of solutions. double precision, public :: omi Smallest value for complex map search. double precision, public :: omf Largest value for complex map search. double precision, public :: gami Smallest value for complex map search. double precision, public :: gamf Largest value for complex map search. logical, public :: loggridw Linear (F) or Log (T) spacing for map search. logical, public :: loggridg Linear (F) or Log (T) spacing for map search. integer, public :: nr = 128 Number of points in frequency grid. integer, public :: ni = 128 Number of points in frequency grid. integer, public :: nperp Number of perpendicular momentum space grid points, . integer, public :: npar Number of parallel momentum space grid points, . integer, public :: ngamma = 100 Number of grid points in relativitic , (Eqn. 3.14). integer, public :: npparbar = 200 Number of grid points in dimensionless paralell momentum , . integer, public :: positions_principal = 5 Number of parallel momentum steps distant from the resonant momentum\nincluded in the numerical calculation of Eqn 3.5, . double precision, public :: Tlim = 0.01d0 Threshold for analytical principal-value integration for\nevaluating Eqn 3.6 and 3.7, . integer, public :: sproc The species number on which this process is working. integer, public :: numiter = 50 Maximum number of iterations in secant method. double precision, public :: D_threshold = 1.d-5 Minimum threshold for secant method. double precision, public :: D_prec = 1.d-5 Size of bounding region for secant method. double precision, public :: D_gap = 1.d-5 Size of allowable difference between roots. double precision, public :: pi The ratio of a circle's circumference to its diameter. character(len=75), public :: arrayName Name of input files for distributions. double precision, public, dimension(:,:,:), allocatable :: f0 Background distribution function array ;\n(1:nspec,0:nperp,0:npar). double precision, public, dimension(:,:,:), allocatable :: f0_rel Relativistic background distribution function array ;\n(1:nspec,0:ngamma,0:npparbar). double precision, public, dimension(:,:,:,:), allocatable :: df0 Perpendicular and parallel derivatives of ;\n(1:nspec,0:nperp,0:npar,1:2), with in index 1, and in index 2. double precision, public, dimension(:,:,:,:), allocatable :: df0_rel Derivatives of ;\n(1:nspec,0:nperp,0:npar,1:2), with in index 1 and in index 2. double precision, public, dimension(:,:,:,:), allocatable :: pp Momentum Space Array for ;\n(1:nspec,0:nperp,0:npar,1:2) with in index 1 and in index 2. double precision, public, dimension(:), allocatable :: current_int Current density, (0:nspec)\nZeroth index is sum over all species double precision, public, dimension(:,:,:), allocatable :: gamma_rel Relativistic momentum space array of ;\n(1:nspec,0:ngamma,0:npparbar). double precision, public, dimension(:,:,:), allocatable :: pparbar_rel Relativistic momentum space array of ;\n(1:nspec,0:ngamma,0:npparbar). integer, public, dimension(:), allocatable :: nmax number of n values to sum over, (1:nspec). integer, public :: nlim (2) Lower and Upper limits for n values for iproc to sum over. double precision, public, dimension(:), allocatable :: ns Ratio of species density to reference , (1:nspec). double precision, public, dimension(:), allocatable :: qs Ratio of species charge to reference , (1:nspec). double precision, public, dimension(:), allocatable :: ms Ratio of species mass to reference , (1:nspec). logical, public, dimension(:), allocatable :: relativistic Use relativistic treatment; (1:nspec). double complex, public, dimension(:,:), allocatable :: wave Wave Equation Tensor (1:3,1:3). double complex, public, dimension(:,:,:), allocatable :: chi0 Susceptibility Tensor (1:nspec,1:3,1:3). double precision, public, dimension(:,:), allocatable :: bessel_array Array of Bessel functions; (nlim(1):nlim(2)+1,0:nperp). integer, public, dimension(:), allocatable :: n_fits Number of fitted functions, (1:nspec) integer, public, dimension(:,:), allocatable :: fit_type Type of analytic function to be fit, (1:nspec,1:maxval(nfits)); 1) Maxwellian, 2) Kappa, 3) Juettner with , 4) Juettner with , constant , 5) Juettner with ; variable , 6) Bi-Moyal distribution. integer, public :: maxsteps_fit = 500 Maximum number of fitting iterations. double precision, public :: lambda_initial_fit = 1.d0 Inital Levenberg-Marquardt damping parameter. double precision, public :: lambdafac_fit = 1.d1 Adjustment factor for Levenberg-Marquardt damping parameter. double precision, public :: epsilon_fit = 1.d-8 Convergence for Levenberg-Marquardt fit. double precision, public, dimension(:,:,:,:), allocatable :: param_fit Fit parameters, (1:nspec,0:nperp,4,maxval(n_fits)). double precision, public, dimension(:,:), allocatable :: perp_correction This parameter, in Eqn. B1, compensates for the strong dependence of , making the fit more reliable. logical, public :: fit_check = .true. If true, output fitted functions to ASCII file for each species. logical, public :: determine_minima = .true. If true, after map search, determine minima and refine solutions. integer, public :: n_resonance_interval = 100 How many steps should be used to integrate around the resonance, , used for integrating near poles (see section 3.1). integer, public :: scan_option = 1 Select case for scans; 1) consecutive scans along input paths in wavevector space, 2) double scans of two selected parameters. integer, public :: n_scan = 0 Number of wavevector scans. Must be set to 2 for scan_option=2; Must be 1 or larger for scan_option=1. 0 turns off wavevector scans. logical, public, dimension(:), allocatable :: logfit Use logarithmic fitting, (1:nspec). logical, public, dimension(:), allocatable :: usebM Use bi-Maxwellian calculation from NHDS, (1:nspec) integer, public, dimension(:), allocatable :: bMnmaxs Maximum number of n for NHDS bi-Maxwellian calculation, (1:nspec). double precision, public, dimension(:), allocatable :: bMBessel_zeros Bessel-zero for NHDS bi-Maxwellian calculation (1:nspec). double precision, public, dimension(:), allocatable :: bMbetas Species beta for\nNHDS bi-Maxwellian calculation (1:nspec). double precision, public, dimension(:), allocatable :: bMalphas Species temperature anisotropy for NHDS bi-Maxwellian calculation. double precision, public, dimension(:), allocatable :: bMpdrifts Species drift momentum for NHDS bi-Maxwellian calculation,\nin units of (1:nspec). type( scanner ), public, dimension (:), allocatable :: scan Scan parameters for each wavevector scan.\n Read in from scan_read . double precision, public :: kperp_last Previous value of . double precision, public :: kpar_last Previous value of . double precision, public :: kperp_0 Current value of . double precision, public :: kpar_0 Current value of . Derived Types type, public :: scanner Description of wavevector scan behavior.\nRead in from scan_read . Components Type Visibility Attributes Name Initial double precision, public :: range_i Initial scan value. double precision, public :: range_f Final scan value. logical, public :: log_scan Use log (T) or linear (F) spacing. logical, public :: heat_s Calculates heating rates if true. logical, public :: eigen_s Calculates eigenfunctions if true. integer, public :: type_s Type of parameter scan; 0: Current value of to =range and =range . 1: at fixed from current value of to range . 2: Wavevector scan at fixed angle to =range . 3: scan with constant . 4: scan with constant . integer, public :: n_out Number of output scan values. integer, public :: n_res Resolution between output scan values. double precision, public :: diff step size for first wavevector variation. double precision, public :: diff2 step size for second wavevector variation.","tags":"","loc":"module/alps_var.html"},{"title":"alps_distribution_analyt – ALPS","text":"This module evaluates a pre-defined function for f0. This is an alternative\nto the use of an f0 table or a bi-Maxwellian approximation.\nThis function can be used to define f0 for the integration or for the analytic\ncontinuation (or both). Used by module~~alps_distribution_analyt~~UsedByGraph module~alps_distribution_analyt alps_distribution_analyt proc~eval_fit alps_analyt::eval_fit proc~eval_fit->module~alps_distribution_analyt program~generate_distribution generate_distribution program~generate_distribution->module~alps_distribution_analyt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Contents Functions distribution_analyt Functions public  function distribution_analyt (is, pperp, ppar) This function returns the pre-defined function as f0. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Index of species. double precision :: pperp Perpendicular momentum. double complex :: ppar Parallel momentum. Return Value doublecomplex","tags":"","loc":"module/alps_distribution_analyt.html"},{"title":"alps – ALPS","text":"Uses mpi alps_fns alps_com alps_var alps_analyt alps_io program~~alps~~UsesGraph program~alps alps module~alps_analyt alps_analyt program~alps->module~alps_analyt module~alps_com alps_com program~alps->module~alps_com module~alps_fns alps_fns program~alps->module~alps_fns module~alps_io alps_io program~alps->module~alps_io module~alps_var alps_var program~alps->module~alps_var mpi mpi program~alps->mpi module~alps_var->mpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Calls program~~alps~~CallsGraph program~alps alps proc~alps_error alps_io::alps_error program~alps->proc~alps_error proc~alps_error_init alps_io::alps_error_init program~alps->proc~alps_error_init proc~derivative_f0 alps_fns::derivative_f0 program~alps->proc~derivative_f0 proc~determine_bessel_array alps_fns::determine_bessel_array program~alps->proc~determine_bessel_array proc~determine_nmax alps_fns::determine_nmax program~alps->proc~determine_nmax proc~determine_param_fit alps_analyt::determine_param_fit program~alps->proc~determine_param_fit proc~display_credits alps_io::display_credits program~alps->proc~display_credits proc~init_param alps_io::init_param program~alps->proc~init_param proc~map_search alps_fns::map_search program~alps->proc~map_search proc~om_double_scan alps_fns::om_double_scan program~alps->proc~om_double_scan proc~om_scan alps_fns::om_scan program~alps->proc~om_scan proc~output_time alps_io::output_time program~alps->proc~output_time proc~pass_distribution alps_com::pass_distribution program~alps->proc~pass_distribution proc~pass_instructions alps_com::pass_instructions program~alps->proc~pass_instructions proc~read_f0 alps_io::read_f0 program~alps->proc~read_f0 proc~refine_guess alps_fns::refine_guess program~alps->proc~refine_guess proc~split_processes alps_fns::split_processes program~alps->proc~split_processes proc~alps_error->proc~output_time mpi_abort mpi_abort proc~alps_error->mpi_abort proc~get_runname alps_io::get_runname proc~alps_error_init->proc~get_runname proc~get_unused_unit alps_io::get_unused_unit proc~alps_error_init->proc~get_unused_unit proc~derivative_f0_rel alps_fns_rel::derivative_f0_rel proc~derivative_f0->proc~derivative_f0_rel proc~derivative_f0->proc~get_unused_unit proc~bessj alps_fns_rel::BESSJ proc~determine_bessel_array->proc~bessj mpi_barrier mpi_barrier proc~determine_nmax->mpi_barrier proc~determine_nmax->proc~bessj proc~lm_nonlinear_fit alps_analyt::LM_nonlinear_fit proc~determine_param_fit->proc~lm_nonlinear_fit proc~output_fit alps_analyt::output_fit proc~determine_param_fit->proc~output_fit proc~bm_read alps_io::bM_read proc~init_param->proc~bm_read proc~fit_read alps_io::fit_read proc~init_param->proc~fit_read proc~get_indexed_double_namelist_unit alps_io::get_indexed_double_namelist_unit proc~init_param->proc~get_indexed_double_namelist_unit proc~get_indexed_namelist_unit alps_io::get_indexed_namelist_unit proc~init_param->proc~get_indexed_namelist_unit proc~init_param->proc~get_unused_unit proc~map_read alps_io::map_read proc~init_param->proc~map_read proc~scan_read alps_io::scan_read proc~init_param->proc~scan_read proc~solution_read alps_io::solution_read proc~init_param->proc~solution_read proc~spec_read alps_io::spec_read proc~init_param->proc~spec_read proc~map_search->proc~refine_guess mpi_bcast mpi_bcast proc~map_search->mpi_bcast proc~disp alps_fns::disp proc~map_search->proc~disp proc~find_minima alps_fns::find_minima proc~map_search->proc~find_minima proc~map_search->proc~get_unused_unit proc~om_double_scan->proc~alps_error proc~om_double_scan->proc~determine_bessel_array proc~om_double_scan->proc~determine_nmax proc~om_double_scan->proc~split_processes proc~om_double_scan->mpi_barrier proc~om_double_scan->mpi_bcast proc~calc_eigen alps_fns::calc_eigen proc~om_double_scan->proc~calc_eigen proc~om_double_scan->proc~disp proc~om_double_scan->proc~get_unused_unit proc~isnancheck alps_io::isnancheck proc~om_double_scan->proc~isnancheck proc~secant alps_fns::secant proc~om_double_scan->proc~secant proc~om_scan->proc~alps_error proc~om_scan->proc~determine_bessel_array proc~om_scan->proc~determine_nmax proc~om_scan->proc~split_processes proc~om_scan->mpi_barrier proc~om_scan->mpi_bcast proc~om_scan->proc~calc_eigen proc~om_scan->proc~disp proc~om_scan->proc~get_unused_unit proc~om_scan->proc~isnancheck proc~om_scan->proc~secant proc~pass_distribution->mpi_bcast proc~pass_instructions->mpi_bcast proc~read_f0->proc~get_unused_unit proc~refine_guess->mpi_barrier proc~refine_guess->proc~disp proc~refine_guess->proc~get_unused_unit proc~refine_guess->proc~secant float float proc~bessj->float proc~bessj0 alps_fns_rel::BESSJ0 proc~bessj->proc~bessj0 proc~bessj1 alps_fns_rel::BESSJ1 proc~bessj->proc~bessj1 proc~calc_eigen->proc~disp proc~derivative_f0_rel->proc~get_unused_unit proc~polyharmonic_spline alps_fns_rel::polyharmonic_spline proc~derivative_f0_rel->proc~polyharmonic_spline proc~disp->mpi_barrier proc~disp->mpi_bcast mpi_reduce mpi_reduce proc~disp->mpi_reduce proc~calc_chi alps_nhds::calc_chi proc~disp->proc~calc_chi proc~determine_resonances alps_fns::determine_resonances proc~disp->proc~determine_resonances proc~full_integrate alps_fns::full_integrate proc~disp->proc~full_integrate proc~int_ee alps_fns::int_ee proc~disp->proc~int_ee proc~int_ee_rel alps_fns_rel::int_ee_rel proc~disp->proc~int_ee_rel proc~get_indexed_double_namelist_unit->proc~alps_error proc~get_indexed_double_namelist_unit->proc~get_unused_unit proc~input_unit alps_io::input_unit proc~get_indexed_double_namelist_unit->proc~input_unit proc~input_unit_exist alps_io::input_unit_exist proc~get_indexed_double_namelist_unit->proc~input_unit_exist proc~get_indexed_namelist_unit->proc~alps_error proc~get_indexed_namelist_unit->proc~get_unused_unit proc~get_indexed_namelist_unit->proc~input_unit proc~get_indexed_namelist_unit->proc~input_unit_exist proc~lm_nonlinear_fit->proc~alps_error dgetrf dgetrf proc~lm_nonlinear_fit->dgetrf dgetri dgetri proc~lm_nonlinear_fit->dgetri proc~determine_jt alps_analyt::determine_JT proc~lm_nonlinear_fit->proc~determine_jt proc~fit_function alps_analyt::fit_function proc~lm_nonlinear_fit->proc~fit_function proc~output_fit->proc~alps_error proc~output_fit->proc~isnancheck proc~eval_fit alps_analyt::eval_fit proc~output_fit->proc~eval_fit proc~secant->mpi_barrier proc~secant->proc~disp proc~besseli alps_nhds::besselI proc~calc_chi->proc~besseli proc~calc_ypsilon alps_nhds::calc_ypsilon proc~calc_chi->proc~calc_ypsilon proc~eval_fit->proc~fit_function proc~distribution_analyt alps_distribution_analyt::distribution_analyt proc~eval_fit->proc~distribution_analyt proc~integrate alps_fns::integrate proc~full_integrate->proc~integrate proc~integrate_res alps_fns::integrate_res proc~full_integrate->proc~integrate_res proc~integrate_res_rel alps_fns_rel::integrate_res_rel proc~full_integrate->proc~integrate_res_rel proc~landau_integrate alps_fns::landau_integrate proc~full_integrate->proc~landau_integrate proc~landau_integrate_rel alps_fns_rel::landau_integrate_rel proc~full_integrate->proc~landau_integrate_rel proc~determine_sproc_rel alps_fns_rel::determine_sproc_rel proc~int_ee_rel->proc~determine_sproc_rel dgesv dgesv proc~polyharmonic_spline->dgesv proc~bessi alps_nhds::BESSI proc~besseli->proc~bessi proc~calc_ypsilon->proc~besseli proc~dispfunct alps_nhds::dispfunct proc~calc_ypsilon->proc~dispfunct proc~int_t alps_fns::int_T proc~integrate->proc~int_t proc~resu alps_fns::resU proc~integrate->proc~resu proc~integrate_res->proc~integrate proc~funct_g alps_fns::funct_g proc~integrate_res->proc~funct_g proc~integrate_res_rel->proc~determine_sproc_rel proc~integrate_resu_rel alps_fns_rel::integrate_resU_rel proc~integrate_res_rel->proc~integrate_resu_rel proc~landau_integrate->proc~eval_fit proc~int_t_res alps_fns::int_T_res proc~landau_integrate->proc~int_t_res proc~landau_integrate_rel->proc~eval_fit proc~landau_integrate_rel->proc~determine_sproc_rel proc~int_t_res_rel alps_fns_rel::int_T_res_rel proc~landau_integrate_rel->proc~int_t_res_rel proc~bessi->float dfloat dfloat proc~bessi->dfloat proc~bessi0 alps_nhds::BESSI0 proc~bessi->proc~bessi0 proc~bessi1 alps_nhds::BESSI1 proc~bessi->proc~bessi1 proc~wofz alps_nhds::WOFZ proc~dispfunct->proc~wofz proc~funct_g->proc~int_t proc~cbessj alps_fns_rel::CBESSJ proc~int_t_res_rel->proc~cbessj proc~integrate_resu_rel->proc~alps_error proc~int_t_rel alps_fns_rel::int_T_rel proc~integrate_resu_rel->proc~int_t_rel proc~principal_integral_rel alps_fns_rel::principal_integral_rel proc~integrate_resu_rel->proc~principal_integral_rel proc~resu_rel alps_fns_rel::resU_rel proc~integrate_resu_rel->proc~resu_rel proc~fact alps_fns_rel::Fact proc~cbessj->proc~fact proc~int_t_rel->proc~bessj proc~funct_g_rel alps_fns_rel::funct_g_rel proc~principal_integral_rel->proc~funct_g_rel dcos dcos proc~wofz->dcos dexp dexp proc~wofz->dexp dsin dsin proc~wofz->dsin idint idint proc~wofz->idint idnint idnint proc~wofz->idnint proc~funct_g_rel->proc~int_t_rel Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables ik Variables Type Attributes Name Initial integer :: ik Index for iterating through wavevector scans with om_scan or om_double_scan","tags":"","loc":"program/alps.html"},{"title":"interpolate – ALPS","text":"This program includes the interpolation routine used by ALPS to fill a grid in momentum space.\nIt is based on the polyharmonic spline algorithm as described in the ALPS code paper. Calls program~~interpolate~~CallsGraph program~interpolate interpolate proc~normalize interpolation.f90::normalize program~interpolate->proc~normalize proc~polyharmonic_spline~2 interpolation.f90::polyharmonic_spline program~interpolate->proc~polyharmonic_spline~2 proc~read_in_params interpolate::read_in_params program~interpolate->proc~read_in_params dgesv dgesv proc~polyharmonic_spline~2->dgesv proc~get_runname~2 interpolate::get_runname proc~read_in_params->proc~get_runname~2 proc~get_unused_unit~2 interpolate::get_unused_unit proc~read_in_params->proc~get_unused_unit~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables grid_coarse pperp_coarse ppar_coarse grid_fine pperp ppar smoothing pperp_min pperp_max ppar_min ppar_max threshold mult_pperp mult_ppar mult_f r_pperp r_ppar r_f pperp_max_set pperp_min_set ppar_max_set ppar_min_set nperp npar n_coarse mode i j io_error status_read i_coarse filename output_file out_to_file do_normalize unit stdout_unit input_unit_no error_unit_no runname foldername Functions input_unit_exist input_unit Subroutines read_in_params get_unused_unit get_runname Variables Type Attributes Name Initial double precision, allocatable, dimension (:) :: grid_coarse Coarse input grid for interpolation.\n(1:n_coarse) double precision, allocatable, dimension (:) :: pperp_coarse Coordinates of perpendicular momentum on coarse grid.\n(1:n_coarse) double precision, allocatable, dimension (:) :: ppar_coarse Coordinates of parallel momentum on coarse grid.\n(1:n_coarse) double precision, allocatable, dimension (:,:) :: grid_fine Fine output grid after interpolation.\n(0:nperp,0:npar) double precision, allocatable, dimension (:,:) :: pperp Coordinates of perpendicular momentum on fine output grid.\n(0:nperp,0:npar) double precision, allocatable, dimension (:,:) :: ppar Coordinates of parallel momentum on fine output grid.\n(0:nperp,0:npar) double precision :: smoothing Smoothing parameter for spline interpolation. double precision :: pperp_min Minimum perpendicuar momentum. double precision :: pperp_max Maximum perpendicular momentum. double precision :: ppar_min Minimum parallel momentum. double precision :: ppar_max Maximum parallel momentum. double precision :: threshold Lower treshold for f0-values (coarse grid) to be included. double precision :: mult_pperp Scaling factor for perpendicular momentum. double precision :: mult_ppar Scaling factor for parallel momentum. double precision :: mult_f Scaling factor for f0. double precision :: r_pperp Read-in variable for perpendicular momentum. double precision :: r_ppar Read-in variable for parallel momentum. double precision :: r_f Read-in variable for f0. double precision :: pperp_max_set Forced maximum perpendicular momentum for output. double precision :: pperp_min_set Forced minimum perpendicular momentum for output. double precision :: ppar_max_set Forced maximum parallel momentum for output. double precision :: ppar_min_set Forced minimum perpendicular momentum for output. integer :: nperp Number of perpendicular steps on fine output grid. integer :: npar Number of parallel steps on fine output grid. integer :: n_coarse Number of entries in coarse grid. integer :: mode Format of input grid (order pperp/ppar). integer :: i Index for loops. integer :: j Index for loops. integer :: io_error Error flag for i/o. integer :: status_read Status flag for i/o. integer :: i_coarse Index to loop over the coarse grid entries. character(len=256) :: filename File name of input file for interpolation. character(len=256) :: output_file File name of output file in ALPS distribution format. logical :: out_to_file Check whether output should be written to file. logical :: do_normalize Check whether normalisation should be applied. integer :: unit Unit variable for opening namelist. integer, parameter :: stdout_unit = 6 Stdout unit for opening namelist. integer, save :: input_unit_no Unit index for opening namelist. integer, save :: error_unit_no = stdout_unit Error unit for opening namelist. character(len=500) :: runname String for parameter input file. character(len=500) :: foldername String for parameter input folder. Functions function input_unit_exist (nml, exist) This function checks whether a unit number exists. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist identifier. logical, intent(out) :: exist Flags whether input unit exists. Return Value integer Unit number. function input_unit (nml) This function returns a unit number for a namelist. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist identifier. Return Value integer Unit number for namelist. Subroutines subroutine read_in_params () This subroutine reads in system parameters input file (namelist) as argument after executable: ./interpolate input.in Arguments None subroutine get_unused_unit (unit) This subroutine returns an available unit number. It is taken from the AstroGK code. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit number. subroutine get_runname (runname, foldername) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O. character(len=500), intent(out) :: foldername Directory in which input file is stored.","tags":"","loc":"program/interpolate.html"},{"title":"generate_distribution – ALPS","text":"Uses alps_distribution_analyt program~~generate_distribution~~UsesGraph program~generate_distribution generate_distribution module~alps_distribution_analyt alps_distribution_analyt program~generate_distribution->module~alps_distribution_analyt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This program generates distribution files for input into ALPS based on pre-defined functions. Calls program~~generate_distribution~~CallsGraph program~generate_distribution generate_distribution proc~distribution_analyt alps_distribution_analyt::distribution_analyt program~generate_distribution->proc~distribution_analyt proc~read_in_params~2 generate_distribution::read_in_params program~generate_distribution->proc~read_in_params~2 proc~get_indexed_namelist_unit~2 generate_distribution::get_indexed_namelist_unit proc~read_in_params~2->proc~get_indexed_namelist_unit~2 proc~get_runname~3 generate_distribution::get_runname proc~read_in_params~2->proc~get_runname~3 proc~get_unused_unit~3 generate_distribution::get_unused_unit proc~read_in_params~2->proc~get_unused_unit~3 proc~spec_read~2 generate_distribution::spec_read proc~read_in_params~2->proc~spec_read~2 proc~get_indexed_namelist_unit~2->proc~get_unused_unit~3 proc~input_unit_exist~3 generate_distribution::input_unit_exist proc~get_indexed_namelist_unit~2->proc~input_unit_exist~3 proc~input_unit~3 generate_distribution::input_unit proc~get_indexed_namelist_unit~2->proc~input_unit~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Contents Variables iperp ipar nperp npar nspec is unit_out writeName outputName dpperp dppar ppar_max pperp_max iperpcorr ifit_1 ifit_2 ifit_3 ifit_4 ifit_5 ppar pperp f0 ms tau alph p_drift kappa maxPperp maxPpar autoscale distribution beta vA maxP pi integrate norm a BESSK ppar_C unit stdout_unit input_unit_no error_unit_no runname Functions input_unit_exist input_unit Subroutines read_in_params spec_read get_indexed_namelist_unit get_unused_unit get_runname Variables Type Attributes Name Initial integer :: iperp Index to loop over perpendicular momentum. integer :: ipar Index to loop over parallel momentum. integer :: nperp Number of steps in perpendicular momentum. integer :: npar Number of steps in parallel momentum. integer :: nspec Total number of plasma species. integer :: is Index to loop over plasma species. integer, dimension(:), allocatable :: unit_out Index for unit for output. (1:nspec) character(len=500) :: writeName String for part of file name. character(len=500) :: outputName String for part of file name. double precision :: dpperp Inifinitesimal step in perpendicular momentum. double precision :: dppar Inifinitesimal step in parallel momentum. double precision :: ppar_max Maximum parallel momentum. double precision :: pperp_max Maximum perpendicular momentum. double precision :: iperpcorr Perpendicular correction . double precision :: ifit_1 Ideal first fit parameter . double precision :: ifit_2 Ideal second fit parameter . double precision :: ifit_3 Ideal third fit parameter . double precision :: ifit_4 Ideal fourth fit parameter . double precision :: ifit_5 Ideal fifth fit parameter . double precision :: ppar Parallel momentum. double precision :: pperp Perpendicular momentum. double precision :: f0 Distribution function. double precision, dimension(:), allocatable :: ms Mass of species. (1:nspec) double precision, dimension(:), allocatable :: tau Parallel temperature ratio of species. (1:nspec) double precision, dimension(:), allocatable :: alph Temperature anisotropy of species. (1:nspec) double precision, dimension(:), allocatable :: p_drift Drift momentum of species. (1:nspec) double precision, dimension(:), allocatable :: kappa Kappa index of species. (1:nspec) double precision, dimension(:), allocatable :: maxPperp Maximum perpendicular momentum of species. (1:nspec) double precision, dimension(:), allocatable :: maxPpar Maximum parallel momentum of species. (1:nspec) logical, dimension (:), allocatable :: autoscale Flag for autoscaling of grid for species. (1:nspec) integer, dimension(:), allocatable :: distribution Type of distribution for species. (1:nspec) double precision :: beta Plasma beta. double precision :: vA Ratio of Alfven speed to c. double precision :: maxP Maximum momentum. double precision :: pi Pi. double precision :: integrate Integration variable. double precision :: norm Normalisation factor for f0. double precision :: a Helper variable for parts of distributions. double precision :: BESSK Modified Bessel function. double complex :: ppar_C Complex version of parallel momentum. integer :: unit Unit for file i/o. integer, parameter :: stdout_unit = 6 Flag for file i/o. integer, save :: input_unit_no Saved input unit for use with multiple read in calls. integer, save :: error_unit_no = stdout_unit Error output unit. character(len=500) :: runname String parameter for input file. Functions function input_unit_exist (nml, exist) Determine if a particular namelist already opened. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist to be opened. logical, intent(out) :: exist Determination if namelist is open. Return Value integer I/O dummy index. function input_unit (nml) Assigns input unit for namelist opening. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: nml Namelist string. Return Value integer I/O dummy index. Subroutines subroutine read_in_params () This subroutine reads in the parameters for the generation of distribution functions for ALPS. Arguments None subroutine spec_read (is) Subroutine for reading in species parameters. Arguments Type Intent Optional Attributes Name integer, intent(in) :: is Species index. subroutine get_indexed_namelist_unit (unit, nml, index_in) Determines unused I/O unit. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be defined. character(len=*), intent(in) :: nml Character string for namelist to be read in. integer, intent(in) :: index_in Index of namelist to be read in. subroutine get_unused_unit (unit) Determine unused number for I/O index. Arguments Type Intent Optional Attributes Name integer, intent(out) :: unit Unit to be assigned. subroutine get_runname (runname) Get runname for output files from input argument. Arguments Type Intent Optional Attributes Name character(len=500), intent(out) :: runname Basename for file I/O.","tags":"","loc":"program/generate_distribution.html"},{"title":"Readme – ALPS","text":"ALPS: The Arbitrary Linear Plasma Solver This is the ALPS code: the Arbitrary Linear Plasma Solver. Authors Kristopher Klein   (kgklein@arizona.edu) Daniel Verscharen  (d.verscharen@ucl.ac.uk) Contents What is ALPS? Acknowledgements Installing the ALPS Code Running the ALPS Code License 1. What is ALPS? ALPS is a parallelised numerical code that solves the Vlasov-Maxwell dispersion\nrelation in hot (even relativistic) magnetised plasma. ALPS allows for any\nnumber of particle species with arbitrary gyrotropic background distribution\nfunctions supporting waves with any direction of propagation with respect to\nthe background magnetic field. If you use the code for a science publication, please provide the code website github.com/danielver02/ALPS in the acknowledgements of your publication and cite the code paper: Verscharen, D., Klein, K. G., Chandran, B. D. G., Stevens, M. L., Salem, C. S.,\nand Bale, S. D.: ALPS: the Arbitrary Linear Plasma Solver, J. Plasma Phys. 84,\n905840403, 2018, doi: 10.1017/S0022377818000739 The documentation of the code can be found on alps.space . 2. Acknowledgements The development of the ALPS code was supported by NASA Grant NNX16AG81G. The code developers appreciate support from the UK Science\nand Technology Facilities Council (STFC) Ernest Rutherford Fellowship ST/P003826/1,\nSTFC Consolidated Grants ST/S000240/1 and ST/W001004/1, and the Open Source\nSoftware Sustainability Funding programme from UCL's Advanced Research Computing\nCentre and UCL's eResearch Domain. We appreciate software engineering support by\nDavid Stansby and Tuomas Koskela from UCL. 3. Installing the ALPS code For advice on the installation of the code, please check INSTALL.md 4. Running the ALPS code ALPS works with input files that specify the plasma and numerical parameters for\nthe calculation. We recommend that you start by checking out the provided test\ncases as a guidance for the creation of input files. These test cases are listed\nin the scripts run_test.sh and run_test_suite.sh in the subfolder ./tests . All associated input files have\na name starting with test_ . You can execute the ALPS code through the following command: mpirun -np <NP> ./src/ALPS <input_file.in> where <NP> is the number of processors you want to use. This number must be greater\nthan or equal to 4, and it must be an even number. <input_file.in> is the input file\nthat includes all parameters for your run. On some systems, depending on the MPI configuration, the oversubscribe flag is\nrequired. In this case, the above command must be replaced with mpirun -np <NP> --oversubscribe ./src/ALPS <input_file.in> For first-time users, we recommend working through our ALPS Tutorial . The key input parameters for ALPS are described on the ALPS Input page. The output format of ALPS is described on the ALPS Output page. 5. License BSD 2-Clause License Copyright (c) 2023, Kristopher G. Klein and Daniel Verscharen\nAll rights reserved. Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","tags":"","loc":"page/index.html"},{"title":"Installing ALPS – ALPS","text":"ALPS: The Arbitrary Linear Plasma Solver These are the install instructions for the ALPS code: the Arbitrary Linear\nPlasma Solver. Authors Kristopher Klein   (kgklein@arizona.edu)\nDaniel Verscharen  (d.verscharen@ucl.ac.uk) CONTENTS Requirements and Dependencies Setting up Computer Environments Getting the ALPS Code Installing the ALPS Code Execution of Test Runs REQUIREMENTS AND DEPENDENCIES ALPS has the following requirements: A UNIX, Linux, or macOS operating system with a working shell GNU make, in some cases it is useful to have the autoconf/automake tools Fortran 90 compiler (e.g., gfortran) - we recommend using the latest version\n  of the compiler to avoid any surprises in the evaluation. MPI (e.g., openmpi) - likewise, this should also be the latest version BLAS and LAPACK - these two libraries are used for the polyharmonic spline\n  interpolation in ALPS. They are directly linked during the compilation SETTING UP COMPUTER ENVIRONMENTS For Ubuntu and macOS users, the following instructions have proven to be useful.\nOn both systems, we recommend deactivating potential anaconda installations\nthat could interfere with the ALPS installation: conda deactivate On Ubuntu, the following installation routines obtain the necessary software\npackages for ALPS: sudo apt-get install -y libopenmpi-dev\nsudo apt-get install -y libopenblas-dev libblas-dev liblapack-dev If an older compiler or MPI version is still installed, it may be necessary to\ndeinstall this before using apt-get. On macOS, homebrew is a good way to install the necessary packages: brew install gcc openmpi GETTING THE ALPS CODE We recommend pulling the latest version of ALPS from GitHub. For this, go to\nthe directory where you want to install ALPS and execute the following command: git clone https://github.com/danielver02/ALPS Alternatively, you can also go to the website https://github.com/danielver02/ALPS\ndirectly and download the source code from there. The advantage of using the git\ncommand is that you can now contribute to the development of the ALPS code. If\nyou make any changes to the code, GitHub will run automatic tests (via workflows)\nto ensure that the changes do not break the code. INSTALLING THE ALPS CODE If all requirements are available, the code can be compiled with the following\ncommands: . / configure make sudo make install ( this option is only required if you want to make the ALPS executable available to all users ) The Makefile.in in the repository has been generated with automake-1.15 from Makefile.am . If you have a different version of automake , make may fail. In that case, start again with autoreconf -i -f before the execution of ./configure . EXECUTION OF TEST RUNS ALPS comes with a selection of test runs that cycle through various test\nproblems. To execute a small set of tests, execute the following shell script: ./run_test.sh This script will test the interpolation routine, the routine to generate pre-\ndescribed distribution functions, and a simply fast dispersion relation. To execute a more complete set of test problems, execute the following shell\nscript: ./run_test_suite.sh This script will test the interpolation routine and then a number of ALPS test\ncases, including the generation of the relevant distribution functions. The test\nroutine outputs time stamps during each steps to compare the speed of the ALPS\ncode and to facilitate scaling tests. For each test, the script will explain\nwhether errors occurred or not in any of the tests. The code output itself will\nbe piped into the .out and .error files in the home directory. For advice on running ALPS, please see the README file. Building the documentation ALPS uses Ford to build its documentation. The documentation is automatically built and deployed to github.io by the doc workflow . To build the documentation locally, follow the Build documentation step in the workflow, summarized here:\n1. Install ford by e.g. pip install ford . See Ford documentation for details\n2. Create a docs directory by mkdir docs 3. Add a line title: Readme to the top of README.md and copy it to docs/index.md 4. Add a line title: Install to the top of INSTALL.md and copy it to docs/INSTALL.md 5. Run ford ford_project.md 6. Open docs/index.html in a browser to view the documentation Adding static pages to documentation The README.md and INSTALL.md files are added to the Ford documentation as static pages. You can add more static pages to the documentation by\n1. Add the content in a markdown file to the repository.\n2. Add a title: line to the beginning of the file and copy it to docs/ in the doc workflow . See steps 3-4 in the previous section, or the Build documentation step in the workflow.\n3. Add the name of the markdown file as a new line under ordered_subpage in ford_project.md","tags":"","loc":"page/INSTALL.html"},{"title":"ALPS Input – ALPS","text":"ALPS Input This is a reference for the key input parameters used by ALPS. Namelists in input files. The following namelists and associated input parameters are read in by ALPS from the input file. &system General system parameters. kperp Initial perpendicular wavevector $ k_{\\perp} d_{p} $. kpar Initial parallel wavevector $k_{\\parallel} d_{p}$. nspec Number of plasma species. nroots Number of dispersion solutions to find and follow. use_map Choice of: -True: Searching for roots over a map in complex frequency space [see &maps_1 namelist]. -False: Input nroots guesses for solutions [see &guess_* namelist]. writeOut Write or suppress output to screen. nperp Perpendicular momentum space resolution, $N_{\\perp}$.\nThe input file must have $N_{\\perp}+1$ values spanning parallel momentum space. npar Parallel momentum space resolution, $N_{\\parallel}$.\nThe input file must have $N_{\\parallel}+1$ values spanning parallel momentum space. ngamma Relativistic momentum space resolution, $N_{\\Gamma}$. npparbar Relativistic parallel momentum space resolution, $N_{\\bar{p}_{\\parallel}}$. vA Reference Alfven velocity, normalized to the speed of light, $v_{A}/c$. arrayName Name of input array, located in 'distribution' folder. Bessel_zero Maximum amplitude of Bessel function to determine nmax . numiter Maximum number of iterations in secant method. D_threshold Minimum threshold for secant method. D_prec Size of bounding region for secant method. D_gap Size of allowable difference between roots. positions_principal Number of parallel momentum steps distant from the resonant momentum\nincluded in the numerical calculation of Eqn 3.5, $M_{I}$. n_resonance_interval How many steps should be used to integrate around the resonance,\n$M_{P}$, used for integrating near poles (see section 3.1). Tlim Threshold for analytical principal-value integration, $t_{\\textrm{lim}}$. maxsteps_fit=500 Maximum number of fitting iterations. lambda_initial_fit Inital Levenberg-Marquardt damping parameter. lambdafac_fit Adjustment factor for Levenberg-Marquardt damping parameter. epsilon_fit Convergence for Levenberg-Marquardt fit. fit_check If true, output fitted functions for each species to file in distribution directory. determine_minima If true, after map search, determine minima and refine solutions. scan_option Select case for wavevector scans; 1. Consecutive scans along input paths in wavevector space, 2. Double scan over wavevector plane. n_scan Number of wavevector scans. 0 turns off wavevector scans. Must be 1 or larger for scan_option =1. Must be set to 2 for scan_option =2. &guess_m Initial guess of complex frequency for $m&#94;{\\textrm{th}}$ solution. Only used when use_map =.false. Need to have number of name lists equal to nroots . g_om Guess for real solution $\\omega_{\\textrm{r}}/\\Omega_{p} $. g_gam Guess for imaginary solution $\\gamma/\\Omega_{p} $. &maps_1 Range of complex frequencies for map_scan subroutine. Only used when use_map =.true. loggridw Linear (F) or Log (T) spacing for $\\omega_{\\textrm{r}}/\\Omega_{p}$ map search.\nSpacing automatically calculated between omi and omf . loggridg Linear (F) or Log (T) spacing for $\\gamma/\\Omega_{p}$ map search.\nSpacing automatically calculated between gami and gamf omi Smallest $\\omega_{\\textrm{r}}/\\Omega_{p}$ value for complex map search. omf Largest $\\omega_{\\textrm{r}}/\\Omega_{p}$ value for complex map search. gami Smallest $\\gamma/\\Omega_{p}$ value for complex map search. gamf Largest $\\gamma/\\Omega_{p}$ value for complex map search. ni Number of $\\gamma/\\Omega_{p}$ points in frequency grid. nr Number of $\\omega_{\\textrm{r}}/\\Omega_{p}$ points in frequency grid. &spec_j Species parameters list for distribution $f_{j}$. nn Relative density $n_{j}/n_{p}$. qq Relative charge $q_{j}/q_{p}$. mm Relative mass $m_{j}/m_{p}$. ff Number of fitted functions for analytical continuation calculation. relat Treat $f_{j}$ as non-relativistic or relativistic. log_fit Use linear or $\\log_{10}$ fitting routine. use_bM Use actual numerical integration (F) or bi-Maxwellian proxy via NHDS routines,\nwith parameters read in from &bM_spec_j namelist. &ffit_j_k Initial Fit Values for species $j$, function $k$. fit_type_in Kind of fit function: Analytic function (KGK: Need to add details on this functionality). Maxwellian, Kappa, Juettner with $p_{\\perp},p_{\\parallel}$, Juettner with variable $\\Gamma$, constant $\\bar{p}_{\\parallel}$, Juettner with $p_{\\perp},p_{\\parallel}$; variable $\\bar{p}_{\\parallel}$, Bi-Moyal distribution fit_1 - fit_5 Fit parameters, $u_1$-$u_5$, defined in the above equations for each of the types of fit functions.\nNot all parameters will be used for all functions. Suggested values for parameters generated by generate_distribution. perpcorr This parameter, $y$ in Eqn. B1, compensates for the strong\n$p_{\\perp}$ dependence of $u_1$, making the fit more reliable. &bM_spec_j Bi-Maxwellian parameters; for species j.\nOnly used if use_bM=T. bM_nmaxs Maximum number of resonances to consider. bM_Bessel Precision threshold for $I_n$. bM_betas $\\beta_{\\parallel,j}$ of biMaxwellian distribution $f_{j}$. bM_alphas $T_{\\perp,j}/T_{\\parallel,j} $ of biMaxwellian distribution $f_{j}$. bM_pdrifts Relative drift of biMaxwellian distribution $f_{j}$,\nin units of $m_{p} v_{A,p}$. &scan_input_l Inputs for scanning parameter space for $l&#94;{\\textrm{th}$ scan. scan_type Type of parameter scan; 0: Current value of $\\textbf{k}$ to\n $k_{\\perp}$=range$ \\textrm{i}$ and $k $ =range$ \\textrm{f}$. 1: $\\theta_0 \\rightarrow \\theta_1$ at fixed $|k|$\n from current value of $\\theta=\\mathrm{atan}(k /k_{\\parallel})$\n to range$ \\textrm{f}$. 2: Wavevector scan at fixed angle $\\theta $ to $|k|$ =range$ \\textrm{f}$. 3: $k $ scan with constant $k_{\\parallel}$. 4: $k_{\\parallel}$ scan with constant $k_{\\perp}$. swi Initial scan value. swf Final scan value. swlog Use $\\mathrm{log}_{10}$ (T) or linear (F) spacing. ns Number of output scan values. nres Resolution between output scan values. heating Calculates heating rates if true. eigen =.false.\nCalculates eigenfunctions if true.","tags":"","loc":"page/input.html"},{"title":"ALPS Output – ALPS","text":"ALPS Output ALPS writes output solutions to the /solution directory. All output file names start with the name of the input file used in running ALPS, e.g. mpirun -np 4 ./src/ALPS filename.in will produce output files all starting with the string filename . filename .map Value of the dispersion tensor $\\mathcal{D}(\\omega_{\\textrm{r}},\\gamma)$ on a defined complex frequency grid. Solutions to the dispersion relation satisfy $|\\mathcal{D}|  =0$.\nThis file is generated from the map_search subroutine in ALPS_fns.f90, and invoked when use_map =.true. . The data is ordered in columns as 1. $\\omega_r$ 2. $\\gamma$ 3. $|\\mathcal{D}|$ 4. Re $[|\\mathcal{D}|]$ 5. Im $[|\\mathcal{D}|]$ The &maps_1 namelist in filename .in determines the structure of filename .map. The range of $\\omega_{\\textrm{r}}/\\Omega_p$ is from omi to omi with nr steps. Logorithmic or linear spacing is selected with loggridw .\nThe range of $\\gamma_{\\textrm{r}}/\\Omega_p$ is from gami to gami with ni steps. Logorithmic or linear spacing is selected with loggridg . filename .roots Identified solutions to the dispersion relation $|\\mathcal{D}|  =0$, calculated using refine_guess in ALPS_fns.f90 when determine_minima is set to true. The data is ordered as 1. Solution number\n2. $\\omega_r$ 3. $\\gamma$ 4. $|\\mathcal{D}|$ 5. Re $[|\\mathcal{D}|]$ 6. Im $[|\\mathcal{D}|]$ The routine uses  either the coarse dispersion tensor map generated from the map_search subroutine (in the case of use_map = .true.) or from the input guesses (for use_map = .false.). Only the first nroots solutions will be identified and written to file. filename .scan_ scan_type_l .root_m The complex frequencies associated with solution m calculated from om_scan in the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ See the &scan_input namelist description in the Quick Guide for details on determining the kind of wavevector scan. This same data structure is preserved for the output from om_double_scan . filename .eigen_ scan_type_l .root_m The eigenfunctions associated with solution m calculated from om_scan when eigen is set to .true.\nin the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ 5. Re $[E_x]$ \n6. Im $[E_x]$ \n7. Re $[E_y]$ \n8. Im $[E_y]$ \n9. Re $[E_z]$ \n10. Im $[E_z]$ \n11. Re $[B_x]$ \n12. Im $[B_x]$ \n13. Re $[B_y]$ \n14. Im $[B_y]$ \n15. Re $[B_z]$ \n16. Im $[B_z]$ 17. [+6(is-1)] Re $[\\delta U_{x,is}]$ 18. [+6(is-1)] Im $[\\delta U_{x,is}]$ 19. [+6(is-1)] Re $[\\delta U_{y,is}]$ 20. [+6(is-1)] Im $[\\delta U_{y,is}]$ 21. [+6(is-1)] Re $[\\delta U_{z,is}]$ 22. [+6(is-1)] Im $[\\delta U_{z,is}]$ 17. [+6( nspec )+2(is-1)] Re $[\\delta n_{is}]$ 18. [+6( nspec )+2(is-1)] Im $[\\delta n_{is}]$ This same data structure is preserved for the output from om_double_scan . filename .heat_ scan_type_l .root_m The heating rates associated with solution m calculated from om_scan when heating is set to .true.\nin the &scan_input_l namelist. The data is ordered as 1. $k_\\perp d_p$\n2. $k_\\parallel d_p$ 3. $\\omega_{\\textrm{r}}/\\Omega_p$ 4. $\\gamma/\\Omega_p$ 5. [+(is-1)] $\\gamma_{is}/\\omega$ This same data structure is preserved for the output from om_double_scan .","tags":"","loc":"page/output.html"},{"title":"ALPS Tutorial – ALPS","text":"ALPS Tutorial This is a tutorial for ALPS. It will guide you through the setting up of some basic input files, the running of the code, and the basic output. For more details, we refer to the ALPS Input page, the ALPS Output page, and the ALPS Documentation . Authors Kristopher Klein   (kgklein@arizona.edu) Daniel Verscharen  (d.verscharen@ucl.ac.uk) Contents Before getting started Installing ALPS Setting up input distributions Running ALPS on f0-tables Interpolation of input distributions Using analytical expressions for the background distribution Running bi-Maxwellian species 1. Before getting started Before starting with the steps described in this tutorial, we recommend that you familiarise yourself with the code paper. Verscharen, D., Klein, K. G., Chandran, B. D. G., Stevens, M. L., Salem, C. S.,\nand Bale, S. D.: ALPS: the Arbitrary Linear Plasma Solver, J. Plasma Phys. 84,\n905840403, 2018, doi: 10.1017/S0022377818000739 You don't need to go through all details, but it is certainly helpful to know what ALPS does and doesn't calculate. The code paper also explains the numerical techniques used in the code, and the ALPS Documentation often refers explicitly to equations and sections in the code paper. We also recommend checking the Readme file. 2. Installing ALPS This tutorial assumes that you have a working copy of ALPS on your computer, including all the required dependencies. You can find the installation guide here . Make sure you have a version of ALPS that compiled completely without error messages after typing ./configure  \nmake 3. Setting up input distributions 3.1 The format of f0-tables ALPS calculates the linear Vlasov-Maxwell dispersion relation for a plasma with arbitrary background distribution functions $f_{0j}$. These input distributions are called f0-tables . All f0-tables for ALPS are stored in the folder ./distribution within the ALPS directory structure. The format of f0-tables is a simple ASCII table with three columns. The columns can be separated with tabs or spaces, but don't add empty lines in the file. The three columns have the following meanings: Perpendicular momentum $p_{\\perp}$ normalised to $m_{\\mathrm p}v_{\\mathrm A}$ Parallel momentum $p_{\\parallel}$ normalised to $m_{\\mathrm p}v_{\\mathrm A}$ Value of the background distribution function $f_{0j}$ at momentum $(p_{\\perp},p_{\\parallel})$ normalised to $(m_{\\mathrm p}v_{\\mathrm A})&#94;{-3}$ In these definitions, $m_{\\mathrm p}$ is the proton mass and $v_{\\mathrm A}$ is the proton Alfvén speed. The distribution function $f_{0j}$ must be normalised to one if integrated over cylindrical momentum space. 3.2 Generating f0-tables In most cases, you may want to use an f0-table generated from observations or numerical simulations. If you can create such a table directly in the ALPS format, that would be ideal. Simply store it in an ASCII file with the following format: dist_name.N.array where dist_name is the name that you want to give the distribution, and N is an integer number indicating the plasma species (e.g., 1 for protons, 2 for electrons). In some cases, you may need to interpolate distributions from an irregular momentum grid to a regular grid in the ALPS coordinates. ALPS comes with an interpolation routine, which is described further below . In other cases, you may want to create an f0-table based on a pre-defined function (e.g., Maxwellian, bi-Maxwellian, or $\\kappa$-distribution). For this tutorial, let's create a simple Maxwellian distribution and run this through ALPS. For this exercise, use your terminal to go into the ./distribution folder: cd ./distribution In the standard ALPS package, you'll find a number of input files to generate distributions. Let's open the file test_ICW_dist.in which includes all parameters needed to create Maxwellian f0-tables for the protons and for the electrons. The various parameters are explained in comments in this input file. Feel free to modify some of these parameters if you want to experiment with it a bit. In general, it's a good idea to use one of the test files as the basis to create new input files for your purposes. When a quantity has the index ref added to it, this refers to the reference species. For example, m_j/m_ref stands for the mass of the current species j in units of the mass of the reference species, which in the example case is the protons. Let's generate the distributions for this example. Simply execute the command ./generate_distribution test_ICW_dist.in The code now generates the following output: Species  1\n Integration:       9.9958E-01\n Norm:              5.9862E-02\n pperp_max:         1.0392E+01\n ppar_max:          6.0000E+00\n\n Fit type:          1\n ideal fit_1:       5.9862E-02\n ideal fit_2:       1.0000E+00\n ideal fit_3:       0.0000E+00\n ideal perpcorr:    3.3333E-01\n============================\nSpecies  2\n Integration:       9.9958E-01\n Norm:              1.4128E+04\n pperp_max:         1.4003E-01\n ppar_max:          1.4003E-01\n\n Fit type:          1\n ideal fit_1:       1.4128E+04\n ideal fit_2:       1.8360E+03\n ideal fit_3:       0.0000E+00\n ideal perpcorr:    1.8360E+03\n============================ Species 1 corresponds to the protons, and species 2 corresponds to the electrons in this case. The output gives us some information about the integration and normalisation of $f_{0j}$ as well as some suggestions for the fit parameters ( ideal fit and ideal perpcorr ) that will become important later for the hybrid-analytic continuation. In addition to this output, the code has also created two files: test_ICW.1.array and test_ICW.2.array . These are the the two f0-tables, which now include the pre-defined Maxwellian distributions for the protons and electrons. Let's open the proton file test_ICW.1.array and have a look: 0.0000000000000000 - 6.0000000000000000 1.3885214326235464E-017 0.0000000000000000 - 5.9500000000000002 2.5237337794355358E-017 0.0000000000000000 - 5.9000000000000004 4.5641827072255333E-017 0.0000000000000000 - 5.8499999999999996 8.2131741067563143E-017 0.0000000000000000 - 5.7999999999999998 1.4705763083579771E-016 0.0000000000000000 - 5.7500000000000000 2.6199477385677698E-016 0.0000000000000000 - 5.7000000000000002 4.6443636702139106E-016 0.0000000000000000 - 5.6500000000000004 8.1919697073946868E-016 ... ... ... As discussed above, the first column is the normalised perpendicular momentum, the second column is the normalised parallel momentum, and the third column is the value of the distribution function. The file contains 29,161 lines, which is just the combination of all perpendicular and parallel momentum steps. These have been defined by the lines nperp=120  \nnpar=240 in the file test_ICW_dist.in . Actually, the number 29,161 corresponds to 121*241, which is greater than 120*240 due to the inner and outer boundaries of the integration space. The variables nperp and npar refer to the integration domain only, which is one step smaller in each dimension than the f0-table. This is an important point to consider when setting up f0-tables: If you have an f0-table of X-by-Y entries in momentum space, set nperp=X-1 and npar=Y-1 in ALPS. Also ensure that the perpendicular momentum grid begins at a momentum of zero. Now that we have two f0-tables in the correct format, let's run ALPS on these! 4. Running ALPS on f0-tables Like for the generation of the input distribution above, we will run one of the test input files for this tutorial to demonstrate the running of ALPS. You can find this test input in the folder ./tests within the ALPS directory structure. Assuming that your terminal is still in ./distribution , let's change directory to ./tests : cd ../tests The input file that we want to use is called test_ICW.in . The name of the input file doesn't need to be the same as the name of the f0-table files ( dist_name ), but it helps to use a consistent nomenclature. Let's open test_ICW.in . It includes all the parameters that ALPS needs to run. Like in the case of the file test_ICW_dist.in above, the input file is commented to help you understand the meaning of the parameters. For more details and a reference to all of the parameters, please have a look at our ALPS Input page. We focus on a few key entries here for now. First, it's important to give the code the correct nperp and npar values. They are defined in the same way as above. So, here is a reminder: If you have an f0-table of X-by-Y entries in momentum space, set nperp=X-1 and npar=Y-1 in ALPS. In the example file, we see that nperp=120 and npar=240 , which are the correct entries for our example. Further down, you find the line arrayName='test_ICW' This line defines the name of the f0-tables that ALPS will use. Since we tell ALPS to work with two species (from the line nspec=2 ), the code will look for two files ./distribution/test_ICW.1.array  \n./distribution/test_ICW.2.array which we had created earlier. If you scroll further down, you'll find the following block: !Initial guess of complex frequency for first solution !Only used when use_map=.false. !Need to have # of name lists equal to nroots & guess_1 g_om = 1 . 5508 d - 01 ! real frequency g_gam = - 1 . 3429 d - 05 ! imaginary frequency / This block defines the initial guess for the frequency that the code will use to search for solutions. By picking the appropriate guess, you can select which plasma mode the code should follow. Remember that all frequencies are normalised to the gyro-frequency of the protons. Further down, you can find definitions for the species. The first species is defined through the following: !Species parameters list; species 1 & spec_1 nn = 1 . d0 ! relative density ; n_j / n_ref qq = 1 . d0 ! relative charge ; q_j / q_ref mm = 1 . d0 ! relative mass ; m_j / m_ref ff = 1 !# of fits to be used . relat = F ! relativistic ( T ) or non - relativistic ( F ) species log_fit = T ! log ( T ) or linear ( F ) fit use_bM = F ! numerically integrate array ( F ) or use bi - Maxwellian ( T ) / !Initial Fit Values; species 1, function 1 & ffit_1_1 fit_type_in = 1 ! Kind of fit function ( see documentation ) fit_1 = 5 . 986 D - 2 ! Suggested values for parameters , fit_2 = 1 . d0 ! e . g . generated by generate_distribution fit_3 = 0 . d0 fit_4 = 0 . d0 fit_5 = 0 . d0 perpcorr = 3 . 33 D - 1 ! renormalization factor / You can recognise many of the parameters from our test_ICW_dist.in file, like the charge and the mass of the particle species The block &ffit_1_1 includes the fit parameters for the hybrid-analytic continuation. As you can see, this file includes the suggestions for the ideal fit that generate_distribution has given us earlier. The key point about the fit parameters is that, for all damped solutions, you want to find a good representation of the distribution function so that the Landau-contour integral is precise. The procedure is described in the code paper in Section 3.2. If you have any closed mathematical expression to use, you can also input this for the analytic continuation as described here . Once we are happy with the parameters in test_ICW.in , let's run ALPS. Depending on your MPI configuration, you can run the code directly with the following commands (it's best to go back into the main folder of the ALPS directory structure): cd ../\nmpirun -np 4 ./src/ALPS tests/test_ICW.in This command will run 4 instances of ALPS via MPI. Depending on your computer and the MPI setup, you may need to add the option --oversubscribe to ensure that 4 instances of MPI can actually be executed. The ALPS binary ( ./src/ALPS ) expectes only one command-line argument: the name of the input file to run on. The number of processes (in this case 4), must always be an even number greater than 2, even if your computer doesn't have four or more cores. In those cases, the --oversubscribe option is particularly important. In general, the code scales quite well, especially for calculations of the dispersion relation with many plasma species and high perpendicular wavenumbers (compared to the species gyro-radii). If everything was successful so far, you'll now start to get the ALPS standard output: =========================================================== I I I A L P S I I Arbitrary Linear Plasma Solver I I I I Version X . X I I I I Kristopher Klein ( kgklein @arizone . edu ) I I Daniel Verscharen ( d . verscharen @ucl . ac . uk ) I I I =========================================================== All processes are up and running . Reading from Input File : test_ICW GUESS ROUTINE : Intial Guess 1 : 1.5508E-01 - 1.3429E-05 SPECIES PARAMETERS : Species 1 : ns / nREF = 1.0000E+00 | qs / qREF = 1.0000E+00 | ms / mREF = 1.0000E+00 Number of fitted functions = 1 Relativistic effects = F Species 2 : ns / nREF = 1.0000E+00 | qs / qREF = - 1.0000E+00 | ms / mREF = 5.4466E-04 Number of fitted functions = 1 Relativistic effects = F -=-=-=-=-=-=-=-=- This output summarises a lot of the information that is useful. We recommend that you read this output carefully, or even that you pipe the output into a log file for later reference by using mpirun -np 4 ./src/ALPS tests/test_ICW.in > test_ICW.output & Further down in the ALPS standard output, you'll find lines similar to this: kperp : 1.0000 E - 03 kpar : 1.0275 E - 01 Converged after iteration 7 D ( 1.4337 E - 01 - 8.9137 E - 06 )= - 2.0138 E - 18 - 1.2447 E - 18 kperp : 1.0000 E - 03 kpar : 1.0557 E - 01 Converged after iteration 8 D ( 1.4729 E - 01 - 8.6524 E - 06 )= - 2.9456 E - 19 - 1.6708 E - 19 kperp : 1.0000 E - 03 kpar : 1.0846 E - 01 Converged after iteration 8 D ( 1.5132 E - 01 - 8.3974 E - 06 )= 7.8943 E - 19 5.5227 E - 19 These lines tell us that the code is actually now finding solutions, as it scans through the wavevector space. The scan options had been defined in test_ICW.in , and details on how this works are given in our ALPS Input page. When the code has finished, it has produced a number of output files, which you can find in the folder ./solution in the ALPS directory structure. Let's look at the file test_ICW.scan_kpara_1.root_1 . As the name suggests, this file contains the scan result for a scan along the parallel wavenumber $k_{\\parallel}$ for root number 1 (we only scan along one root in this example). The file has the following format: 1.0000E-03 1.0000E-01 1.4424E-01 - 1.0449E-05 1.0000E-03 1.0275E-01 1.4337E-01 - 8.9137E-06 1.0000E-03 1.0557E-01 1.4729E-01 - 8.6524E-06 1.0000E-03 1.0846E-01 1.5132E-01 - 8.3974E-06 1.0000E-03 1.1144E-01 1.5546E-01 - 8.1484E-06 1.0000E-03 1.1450E-01 1.5971E-01 - 7.9055E-06 ... ... ... ... The format of the columns is as follows: Wavenumber $k_{\\perp}$ perpendicular to the background magnetic field in units of $\\Omega_{\\mathrm p}/v_{\\mathrm A}$ Wavenumber $k_{\\parallel}$ parallel to the background magnetic field in units of $\\Omega_{\\mathrm p}/v_{\\mathrm A}$ Real part of the wave frequency $\\omega$ in units of $\\Omega_{\\mathrm p}$ Imaginary part of the wave frequency $\\omega$ in units of $\\Omega_{\\mathrm p}$ In these definitions, $\\Omega_{\\mathrm p}$ is the proton gyro-frequency. Congratulations! You have found the solutions to the Maxwellian example case for the ion-cyclotron wave. Now you can also experiment with the other test cases in the folders ./distribution and ./tests . The code also includes a full test suite which you can launch with cd ./tests  \n./run_test_suite.sh The given test cases cover a range of typical applications, so there should be good starting points for your purposes. The code also creates additional output files for the heating contributions and for the eigenfunctions of the solutions. The general output format of ALPS is described on our ALPS Output page. 5. Interpolation of input distributions In many cases, you may want to use an f0-table based on a data file that is not in the same format as the ALPS format (e.g., from spacecraft observations) or isn't equally spaced in momentum space as required by ALPS. For those cases, ALPS provides an interpolation routine, which you can find in the folder ./interpolation . The ALPS code also comes with a test case to illustrate the the use of the interpolation routine. We'll go through this example here. Let's have a look at the file test_interp_coarse.array . This file includes a table of the distribution function, but not in the format as needed by ALPS: 3.48994945E-04 9.99390800E-03 0.999899983 3.67403193E-03 9.30061750E-03 0.999899983 6.57521421E-03 7.53435818E-03 0.999899983 8.71784426E-03 4.89889691E-03 0.999899983 9.85473860E-03 1.69827254E-03 0.999899983 9.85473767E-03 - 1.69827335E-03 0.999899983 ... ... ... The overall format is the same as in the f0-table files above in terms of the meaning of the columns: Perpendicular momentum $p_{\\perp}$ normalised to $m_{\\mathrm p}v_{\\mathrm A}$ Parallel momentum $p_{\\parallel}$ normalised to $m_{\\mathrm p}v_{\\mathrm A}$ Value of the background distribution function $f_{0j}$ at momentum $(p_{\\perp},p_{\\parallel})$ normalised to $(m_{\\mathrm p}v_{\\mathrm A})&#94;{-3}$ Now let's look at the input file test_interp.in for the interpolation routine. This file includes a number of comments to help you with the setting up of the interpolation parameters. The file asks the interpolation routine to take the irregular table from test_interp_coarse.array and to interpolate it onto a grid in the ALPS format with nperp=50 and npar=100 . If needed, the code can also re-normalise and scale the distribution function depending on your needs. Let's run the interpolation routine on the input file: ./interpolation test_interp.in If successful, we will get the following output: Number of points in the coarse grid:          700\n\nProperties of the fine grid:\nNumber of grid points in nperp:                50\nNumber of grid points in npar:                100\nMaximum Pperp:                         2.9663E+00\nMinimum Pperp:                         0.0000E+00\nMaximum Ppar:                          3.0082E+00\nMinimum Ppar:                         -3.0082E+00\n\nWriting output to file test_interp.in.array At the same time, the folder now includes a new file test_interp.in.array , which includes the interpolated f0-table in the correct format for ALPS: 0.0000000000000000 - 3.0081663100000000 2.5699885852486149E-005 0.0000000000000000 - 2.9480029837999999 3.4671386965111912E-005 0.0000000000000000 - 2.8878396575999998 4.7473668668616121E-005 0.0000000000000000 - 2.8276763314000002 6.5558031421796410E-005 0.0000000000000000 - 2.7675130052000001 9.0732738996456109E-005 0.0000000000000000 - 2.7073496790000000 1.2528393376824723E-004 0.0000000000000000 - 2.6471863527999999 1.7212176003060674E-004 0.0000000000000000 - 2.5870230265999998 2.3495069283188794E-004 0.0000000000000000 - 2.5268597004000002 3.1846300082066743E-004 ... ... ... You can copy this file over into the ./distribution folder and give it the appropriate naming with the convention given above. Then ALPS can use this interpolated file for the calculation. 6. Using analytical expressions for the background distribution In some instances, you may have an analytical expression for the distribution function (which is not covered by generate_distribution ) that you want to run through ALPS. For example, you may want to analyse the instability of a model distribution that was derived analytical from a model. ALPS can also do this. For such a calculation, we need to define the background distribution in the code directly. Let's open the file ./solution/distribution_analyt.f90 . This is a Fortran file that allows you to feed an analytical expression for the background distribution into ALPS. If you have the standard version of ALPS from the repository, this f90 file already contains some variable declarations and an example case. Let's scroll down to the following part: select case(is)\n\n  case(1) ! Species 1\n\n    ! The example below illustrates how to set up a Maxwellian with beta = 1:\n    beta=1.d0\n    ms=1.d0\n\n    f0=(pi**(-1.5d0) /((ms * beta )**(3.d0/2.d0) )) * exp( -( ppar**2/( beta * ms)&\n      + (pperp**2)/( beta * ms ) ) )\n\n  case(2) ! Species 2\n     ... The different cases here refer to the species. This allows you to use different equations for, say, electrons and protons. Whatever is defined as the variable f0 as a function of the variables pperp and ppar inside these cases defines the f0-table. If you require additional variables or functions to define your model distribution, please feel free to define them locally in this Fortran function. Important : You must ensure that the defined background distribution function is normalised to one. The code doesn't automatically normalise the distribution. However, the ALPS standard output will list the integration of the distribution, so that you can double check. The example above defines a simple Maxwellian for the protons and for the electrons as a simple example. Once you have defined the background distribution in distribution_analyt.f90 , it's important to re-compile the code, so that it includes the defined function: cd ../  \nmake For the next step, we need to create the f0-table based on the defined function. This is done with generate_distribution as for the other analytical cases. We have an example input file ./distribution/test_analytical_dist.in , which does exactly that. For both species, this file defines the distribution type as zero in the lines: distributions=0  !Type of distribution (see documentation) If you set distributions=0 , the function generate_distribution will use the function defined in distribution_analyt.f90 to create an f0-table. Let's run cd ./distribution    \n./generate_distribution test_analytical_dist.in The standard output explains a couple of details, which we had already encountered above. Most importantly, the programme now creates two new files: test_analytical.1.array   \ntest_analytical.2.array These files include the f0-tables according to the analytical function. Now it's important to tell ALPS to use the defined distribution functions. This happens in the ALPS input file. In the folder ./tests , there is an example file called test_analytical.in , which we will use in this example. As expected, it commands ALPS to use the f0-tables that we have just created: arrayName='test_analytical' It also makes sense to use the pre-defined background distribution function from distribution_analyt.f90 also for the analytical continuation. You can achieve this by setting ff=0 in the block of the corresponding species. If you set ff=0 , the code will look up the function in distribution_analyt.f90 to evaluate the Landau-contour integral. If you now run this test case through mpirun -np 4 ./src/ALPS ./tests/test_analytical.in the code will fully calculate the dispersion relation based on the distribution function defined in distribution_analyt.f90 . A particular strength is that you can use that distribution for the creation of the f0-table, the Landau-contour integral (analytic continuation), or for both. Sometimes, you may only want to use it for the f0-table and rely on ALPS's internal fitting. If that is the case, simply set ff to the corresponding number of fits and define the fits as usual. At other times, you may only want to use the function from distribution_analyt.f90 as the fit function, but use a different f0-table. In that is the case, point ALPS to your usual f0-table files, but set ff=0 . 7. Running bi-Maxwellian species In some instances, it may be useful to assume a Maxwellian or bi-Maxwellian distribution for one or more species in the system. For example, you may want to calculate the proton susceptibilities based on an f0-table, but you're happy to work with a simple bi-Maxwellian electron population. In that case, ALPS includes an implementation of the NHDS code to accelerate the calculation. ALPS then does not integrate over the bi-Maxwellian distribution explicitly but uses the known analytical approximations. The relevant option for a bi-Maxwellian calculation is the logical flag use_bM in the ALPS input file under the section for the corresponding species. If you set use_bM=T for any species, its contributions to the dielectric tensor will be calculated with the NHDS routines. Also the Landau-contour integration will be done through NHDS. Once use_bM is set to true, ALPS will look for the parameters used to define the bi-Maxwellian properties of the corresponding species. These are given in a species-dependent block in the ALPS input file, which may look like this: !Bi-Maxwellian parameters; for species 1 !Only used if use_bM=T & bM_spec_1 bM_nmaxs = 500 ! Maximum number of resonaces to consider bM_Bessel_zeros = 1 . d - 50 ! Amplitude limit for Bessel function bM_betas = 1 . d0 ! Plasma beta for species 1 bM_alphas = 1 . d0 ! Tperp / Tpar for species 1 bM_pdrifts = 0 . d0 ! Momentum drift , norm . to m_ref v_A , ref / The ALPS code suite includes a test case called ./tests/test_bimax.in that uses the NHDS routines for a quick calculation of the dispersion relation for a bi-Maxwellian plasma.","tags":"","loc":"page/tutorial.html"}]}